from typing import overload, Union

class SbDict:
  @overload
  def __init__(self, entries):
    ...

  @overload
  def __init__(self, from_):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def applyToAll(self, rtn):
    ...

  @overload
  def applyToAll(self, rtn, data):
    ...

  def clear(self):
    ...

  def enter(self, key, value):
    ...

  def find(self, key, value):
    ...

  def makePList(self, keys, values):
    ...

  def remove(self, key):
    ...

  def setHashingFunction(self, func):
    ...

class SoType:
  @staticmethod
  def fromName(name):
    ...

  def getName(self):
    ...

  def getParent(self):
    ...

  def isDerivedFrom(self, type):
    ...

  @staticmethod
  def getAllDerivedFrom(type, list):
    ...

  def canCreateInstance(self):
    ...

  def createInstance(self):
    ...

  def getData(self):
    ...

  def getKey(self):
    ...

  @staticmethod
  def createType(parent, name, method, data):
    ...

  @staticmethod
  def overrideType(originalType, method):
    ...

  @staticmethod
  def removeType(name):
    ...

  @staticmethod
  def init():
    ...

  @staticmethod
  def fromKey(key):
    ...

  @staticmethod
  def badType():
    ...

  def isBad(self):
    ...

  def makeInternal(self):
    ...

  def isInternal(self):
    ...

  @staticmethod
  def getNumTypes():
    ...

  def getInstantiationMethod(self):
    ...

class SbPList:
  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  @overload
  def __init__(self):
    ...

  def copy(self, l):
    ...

  def fit(self):
    ...

  def append(self, item):
    ...

  def find(self, item):
    ...

  def insert(self, item, insertbefore):
    ...

  def removeItem(self, item):
    ...

  def remove(self, index):
    ...

  def removeFast(self, index):
    ...

  def getLength(self):
    ...

  def truncate(self, length, fit):
    ...

  def getArrayPtr(self, start):
    ...

  def get(self, index):
    ...

  def set(self, index, item):
    ...

class SoNotRec:
  # Type
  CONTAINER: "SoSFEnum" = ...
  PARENT: "SoSFEnum" = ...
  SENSOR: "SoSFEnum" = ...
  FIELD: "SoSFEnum" = ...
  ENGINE: "SoSFEnum" = ...
  # OperationType
  UNSPECIFIED: "SoSFEnum" = ...
  FIELD_UPDATE: "SoSFEnum" = ...
  GROUP_ADDCHILD: "SoSFEnum" = ...
  GROUP_INSERTCHILD: "SoSFEnum" = ...
  GROUP_REPLACECHILD: "SoSFEnum" = ...
  GROUP_REMOVECHILD: "SoSFEnum" = ...
  GROUP_REMOVEALLCHILDREN: "SoSFEnum" = ...
  def __init__(self, notifbase):
    ...

  def setType(self, type):
    ...

  def getBase(self):
    ...

  def getType(self):
    ...

  def getPrevious(self):
    ...

  def setPrevious(self, prev):
    ...

  def print(self, file):
    ...

  def getOperationType(self):
    ...

  def getIndex(self):
    ...

  def getFieldNumIndices(self):
    ...

  def getGroupChild(self):
    ...

  def getGroupPrevChild(self):
    ...

  def setOperationType(self, opType):
    ...

  def setIndex(self, idx):
    ...

  def setFieldNumIndices(self, fldnumind):
    ...

  def setGroupChild(self, gc):
    ...

  def setGroupPrevChild(self, pc):
    ...

class SoNotList:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, nl):
    ...

  @overload
  def append(self, rec):
    ...

  @overload
  def append(self, rec, field):
    ...

  @overload
  def append(self, rec, engineout):
    ...

  def setLastType(self, type):
    ...

  def getFirstRec(self):
    ...

  def getLastRec(self):
    ...

  def getFirstRecAtNode(self):
    ...

  def getLastField(self):
    ...

  def getLastEngineOutput(self):
    ...

  def getTimeStamp(self):
    ...

  def print(self, file):
    ...

class SoAuditorList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, auditor, type):
    ...

  def set(self, index, auditor, type):
    ...

  def getObject(self, index):
    ...

  def getType(self, index):
    ...

  def getLength(self):
    ...

  def find(self, auditor, type):
    ...

  @overload
  def remove(self, index):
    ...

  @overload
  def remove(self, auditor, type):
    ...

  def notify(self, l):
    ...

class SoBase:
  @staticmethod
  def initClass():
    ...

  def ref(self):
    ...

  def unref(self):
    ...

  def unrefNoDelete(self):
    ...

  def getRefCount(self):
    ...

  def touch(self):
    ...

  def getTypeId(self):
    ...

  def isOfType(self, type):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getName(self):
    ...

  def setName(self, newname):
    ...

  @staticmethod
  def addName(base, name):
    ...

  @staticmethod
  def removeName(base, name):
    ...

  def startNotify(self):
    ...

  def notify(self, l):
    ...

  def addAuditor(self, auditor, type):
    ...

  def removeAuditor(self, auditor, type):
    ...

  def getAuditors(self):
    ...

  def addWriteReference(self, out, isfromfield):
    ...

  def shouldWrite(self):
    ...

  @staticmethod
  def incrementCurrentWriteCounter():
    ...

  @staticmethod
  def decrementCurrentWriteCounter():
    ...

  @staticmethod
  def getNamedBase(name, type):
    ...

  @staticmethod
  def getNamedBases(name, baselist, type):
    ...

  @staticmethod
  def read(input, base, expectedtype):
    ...

  @staticmethod
  def setInstancePrefix(c):
    ...

  @staticmethod
  def setTraceRefs(trace):
    ...

  @staticmethod
  def getTraceRefs():
    ...

  @staticmethod
  def connectRoute(input, fromnodename, fromfieldname, tonodename, tofieldname):
    ...

  def assertAlive(self):
    ...

  @staticmethod
  def readRoute(input):
    ...

class SoFieldContainer(SoBase):
  @staticmethod
  def initClass():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def cleanupClass():
    ...

  def setToDefaults(self):
    ...

  def hasDefaultValues(self):
    ...

  def fieldsAreEqual(self, container):
    ...

  def copyFieldValues(self, container, copyconnections):
    ...

  @overload
  def set(self, fielddata):
    ...

  @overload
  def set(self, fielddata, input):
    ...

  @overload
  def get(self, fielddata):
    ...

  @overload
  def get(self, fielddata, out):
    ...

  def getFields(self, l):
    ...

  def getAllFields(self, l):
    ...

  def getField(self, name):
    ...

  def getEventIn(self, name):
    ...

  def getEventOut(self, name):
    ...

  def getFieldName(self, field, name):
    ...

  def enableNotify(self, flag):
    ...

  def isNotifyEnabled(self):
    ...

  def notify(self, l):
    ...

  def validateNewFieldValue(self, field, newval):
    ...

  def addWriteReference(self, out, isfromfield):
    ...

  def writeInstance(self, out):
    ...

  def getIsBuiltIn(self):
    ...

  def getFieldData(self):
    ...

  def copyContents(self, from_, copyconnections):
    ...

  def copyThroughConnection(self):
    ...

  @staticmethod
  def initCopyDict():
    ...

  @staticmethod
  def addCopy(orig, copy):
    ...

  @staticmethod
  def checkCopy(orig):
    ...

  @staticmethod
  def findCopy(orig, copyconnections):
    ...

  @staticmethod
  def copyDone():
    ...

  def getFieldsMemorySize(self, managed, unmanaged):
    ...

  def setUserData(self, userdata):
    ...

  def getUserData(self):
    ...

class SoNode(SoFieldContainer):
  # Stage
  FIRST_INSTANCE: "SoSFEnum" = ...
  PROTO_INSTANCE: "SoSFEnum" = ...
  OTHER_INSTANCE: "SoSFEnum" = ...
  # NodeType
  INVENTOR: "SoSFEnum" = ...
  VRML1: "SoSFEnum" = ...
  VRML2: "SoSFEnum" = ...
  INVENTOR_1: "SoSFEnum" = ...
  INVENTOR_2_0: "SoSFEnum" = ...
  INVENTOR_2_1: "SoSFEnum" = ...
  INVENTOR_2_5: "SoSFEnum" = ...
  INVENTOR_2_6: "SoSFEnum" = ...
  COIN_1_0: "SoSFEnum" = ...
  COIN_2_0: "SoSFEnum" = ...
  EXTENSION: "SoSFEnum" = ...
  COIN_2_2: "SoSFEnum" = ...
  COIN_2_3: "SoSFEnum" = ...
  COIN_2_4: "SoSFEnum" = ...
  INVENTOR_5_0: "SoSFEnum" = ...
  COIN_2_5: "SoSFEnum" = ...
  COIN_3_0: "SoSFEnum" = ...
  INVENTOR_6_0: "SoSFEnum" = ...
  COIN_4_0: "SoSFEnum" = ...
  def setOverride(self, state):
    ...

  def isOverride(self):
    ...

  @staticmethod
  def getCompatibilityTypes(nodetype):
    ...

  def setNodeType(self, type):
    ...

  def getNodeType(self):
    ...

  def copy(self, copyconnections):
    ...

  def affectsState(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  def GLRenderInPath(self, action):
    ...

  def GLRenderOffPath(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    """Action method for SoGetMatrixAction.

Updates action by accumulating with the transformation matrix of
this node (if any)."""
    ...

  def handleEvent(self, action):
    ...

  def pick(self, action):
    ...

  def rayPick(self, action):
    ...

  def search(self, action):
    ...

  def write(self, action):
    ...

  def audioRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def grabEventsSetup(self):
    ...

  def grabEventsCleanup(self):
    ...

  def startNotify(self):
    ...

  def notify(self, l):
    ...

  def getNodeId(self):
    ...

  def getChildren(self):
    ...

  def writeInstance(self, out):
    ...

  def addToCopyDict(self):
    ...

  def copyContents(self, from_, copyconnections):
    ...

  def copyThroughConnection(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @overload
  @staticmethod
  def getByName(name):
    ...

  @overload
  @staticmethod
  def getByName(name, l):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def initClasses():
    ...

  @staticmethod
  def getNextNodeId():
    ...

  @staticmethod
  def getActionMethodIndex(type):
    ...

  @staticmethod
  def getBoundingBoxS(action, node):
    ...

  @staticmethod
  def GLRenderS(action, node):
    ...

  @staticmethod
  def callbackS(action, node):
    ...

  @staticmethod
  def getMatrixS(action, node):
    ...

  @staticmethod
  def handleEventS(action, node):
    ...

  @staticmethod
  def pickS(action, node):
    ...

  @staticmethod
  def rayPickS(action, node):
    ...

  @staticmethod
  def searchS(action, node):
    ...

  @staticmethod
  def writeS(action, node):
    ...

  @staticmethod
  def audioRenderS(action, node):
    ...

  @staticmethod
  def getPrimitiveCountS(action, node):
    ...

class SbIntList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  def append(self, item):
    ...

  def find(self, item):
    ...

  def insert(self, item, addbefore):
    ...

class SoBaseList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, size):
    ...

  @overload
  def __init__(self, l):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, ptr):
    ...

  def insert(self, ptr, addbefore):
    ...

  def remove(self, index):
    ...

  def removeItem(self, item):
    ...

  def truncate(self, length):
    ...

  def copy(self, l):
    ...

  def set(self, i, ptr):
    ...

  def addReferences(self, flag):
    ...

  def isReferencing(self):
    ...

class SoDetailList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, detail):
    ...

  def insert(self, detail, insertbefore):
    ...

  def truncate(self, length, fit):
    ...

  def copy(self, l):
    ...

  def set(self, index, item):
    ...

class SoTypeList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  def append(self, type):
    ...

  def find(self, type):
    ...

  def insert(self, type, insertbefore):
    ...

  def set(self, index, item):
    ...

class SoEnabledElementsList:
  @overload
  def __init__(self, parentlist):
    ...

  @overload
  def __init__(self):
    ...

  def getElements(self):
    ...

  def enable(self, elementtype, stackindex):
    ...

  def merge(self, eel):
    ...

  @staticmethod
  def getCounter():
    ...

class SoEngineOutputList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  def append(self, output):
    ...

  def insert(self, output, insertbefore):
    ...

  def set(self, idx, item):
    ...

class SoEngineList(SoBaseList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, size):
    ...

  @overload
  def __init__(self, el):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, ptr):
    ...

class SoFieldList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  def append(self, field):
    ...

  def insert(self, field, insertbefore):
    ...

  def set(self, idx, field):
    ...

  def get(self, idx):
    ...

class SoNodeList(SoBaseList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, size):
    ...

  @overload
  def __init__(self, nl):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, ptr):
    ...

class SoPathList(SoBaseList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, size):
    ...

  @overload
  def __init__(self, pl):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, path):
    ...

  def findPath(self, path):
    ...

  def sort(self):
    ...

  def uniquify(self):
    ...

class SoPickedPointList(SbPList):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, pp):
    ...

  def insert(self, pp, insertbefore):
    ...

  def truncate(self, start, fit):
    ...

  def set(self, idx, pp):
    ...

class SbList:
  @overload
  def __init__(self, sizehint):
    ...

  @overload
  def __init__(self, l):
    ...

  @overload
  def __init__(self):
    ...

  def copy(self, l):
    ...

  def fit(self):
    ...

  def append(self, item):
    ...

  def find(self, item):
    ...

  def insert(self, item, insertbefore):
    ...

  def removeItem(self, item):
    ...

  def remove(self, index):
    ...

  def removeFast(self, index):
    ...

  def getLength(self):
    ...

  def truncate(self, length, dofit):
    ...

  def push(self, item):
    ...

  def pop(self):
    ...

  def getArrayPtr(self, start):
    ...

  def ensureCapacity(self, size):
    ...

class SbString:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, s):
    ...

  @overload
  def __init__(self, s):
    ...

  @overload
  def __init__(self, s, start, end):
    ...

  @overload
  def __init__(self, s):
    ...

  @overload
  def __init__(self, digits):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def hash(self):
    ...

  @overload
  @staticmethod
  def hash(s):
    ...

  def getLength(self):
    ...

  def makeEmpty(self, freeold):
    ...

  def getString(self):
    ...

  def getSubString(self, startidx, endidx):
    ...

  def deleteSubString(self, startidx, endidx):
    ...

  def addIntString(self, value):
    ...

  def compareSubString(self, text, offset):
    ...

  def sprintf(self, formatstr):
    ...

  def vsprintf(self, formatstr, args):
    ...

  def apply(self, func):
    ...

  def find(self, s):
    ...

  def findAll(self, s, found):
    ...

  def lower(self):
    ...

  def upper(self):
    ...

  def print(self, fp):
    ...

class SbName:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, namestring):
    ...

  @overload
  def __init__(self, str):
    ...

  @overload
  def __init__(self, name):
    ...

  @overload
  def __init__(self):
    ...

  def getString(self):
    ...

  def getLength(self):
    ...

  @staticmethod
  def isIdentStartChar(c):
    ...

  @staticmethod
  def isIdentChar(c):
    ...

  @staticmethod
  def isBaseNameStartChar(c):
    ...

  @staticmethod
  def isBaseNameChar(c):
    ...

  @staticmethod
  def empty():
    ...

class SoSensorManager:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def insertDelaySensor(self, s):
    ...

  def insertTimerSensor(self, s):
    ...

  def removeDelaySensor(self, s):
    ...

  def removeTimerSensor(self, s):
    ...

  def setChangedCallback(self, sensorQueueChangedCB, data):
    ...

  def rescheduleTimer(self, s):
    ...

  def removeRescheduledTimer(self, s):
    ...

  def processDelayQueue(self, isidle):
    ...

  def processImmediateQueue(self):
    ...

  def processTimerQueue(self):
    ...

  def isDelaySensorPending(self):
    ...

  def isTimerSensorPending(self, tm):
    ...

  def setDelaySensorTimeout(self, t):
    ...

  def getDelaySensorTimeout(self):
    ...

  def doSelect(self, nfds, readfds, writefds, exceptfds, userTimeOut):
    ...

class SoDB:
  @staticmethod
  def init():
    ...

  @staticmethod
  def finish():
    ...

  @staticmethod
  def cleanup():
    ...

  @staticmethod
  def getVersion():
    ...

  @overload
  @staticmethod
  def read(input, path):
    ...

  @overload
  @staticmethod
  def read(input, base):
    ...

  @overload
  @staticmethod
  def read(input, rootnode):
    ...

  @staticmethod
  def readAll(input):
    ...

  @staticmethod
  def readAllVRML(input):
    ...

  @staticmethod
  def isValidHeader(teststring):
    ...

  @staticmethod
  def registerHeader(headerstring, isbinary, ivversion, precallback, postcallback, userdata):
    ...

  @staticmethod
  def getHeaderData(headerstring, isbinary, ivversion, precallback, postcallback, userdata, substringok):
    ...

  @staticmethod
  def getNumHeaders():
    ...

  @staticmethod
  def getHeaderString(i):
    ...

  @staticmethod
  def createGlobalField(name, type):
    ...

  @staticmethod
  def getGlobalField(name):
    ...

  @staticmethod
  def renameGlobalField(from_, to):
    ...

  @staticmethod
  def setRealTimeInterval(interval):
    ...

  @staticmethod
  def getRealTimeInterval():
    ...

  @staticmethod
  def enableRealTimeSensor(on):
    ...

  @staticmethod
  def getSensorManager():
    ...

  @staticmethod
  def setDelaySensorTimeout(t):
    ...

  @staticmethod
  def getDelaySensorTimeout():
    ...

  @staticmethod
  def doSelect(nfds, readfds, writefds, exceptfds, usertimeout):
    ...

  @staticmethod
  def addConverter(from_, to, converter):
    ...

  @staticmethod
  def getConverter(from_, to):
    ...

  @staticmethod
  def isInitialized():
    ...

  @staticmethod
  def startNotify():
    ...

  @staticmethod
  def isNotifying():
    ...

  @staticmethod
  def endNotify():
    ...

  @staticmethod
  def addProgressCallback(func, userdata):
    ...

  @staticmethod
  def removeProgressCallback(func, userdata):
    ...

  @staticmethod
  def isMultiThread():
    ...

  @staticmethod
  def readlock():
    ...

  @staticmethod
  def readunlock():
    ...

  @staticmethod
  def writelock():
    ...

  @staticmethod
  def writeunlock():
    ...

  @staticmethod
  def createRoute(from_, eventout, to, eventin):
    ...

  @staticmethod
  def removeRoute(from_, eventout, to, eventin):
    ...

class SoInput:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, dictIn):
    ...

  @overload
  def __init__(self):
    ...

  def findProto(self, name):
    ...

  def addProto(self, proto):
    ...

  def pushProto(self, proto):
    ...

  def getCurrentProto(self):
    ...

  def popProto(self):
    ...

  def addRoute(self, fromnode, fromfield, tonode, tofield):
    ...

  def checkISReference(self, container, fieldname, readok):
    ...

  def setFilePointer(self, newFP):
    ...

  def openFile(self, fileName, okIfNotFound):
    ...

  def pushFile(self, fileName):
    ...

  def closeFile(self):
    ...

  def isValidFile(self):
    ...

  def isValidBuffer(self):
    ...

  def getCurFile(self):
    ...

  def getCurFileName(self):
    ...

  def setBuffer(self, bufpointer, bufsize):
    ...

  def setStringArray(self, strings):
    ...

  def getNumBytesRead(self):
    ...

  def getHeader(self):
    ...

  def getIVVersion(self):
    ...

  def isBinary(self):
    ...

  def get(self, c):
    ...

  def getASCIIBuffer(self, c):
    ...

  def getASCIIFile(self, c):
    ...

  def readHex(self, l):
    ...

  @overload
  def read(self, c):
    ...

  @overload
  def read(self, c, skip):
    ...

  @overload
  def read(self, s):
    ...

  @overload
  def read(self, n, validIdent):
    ...

  @overload
  def read(self, i):
    ...

  @overload
  def read(self, i):
    ...

  @overload
  def read(self, s):
    ...

  @overload
  def read(self, s):
    ...

  @overload
  def read(self, f):
    ...

  @overload
  def read(self, d):
    ...

  @overload
  def readByte(self, b):
    ...

  @overload
  def readByte(self, b):
    ...

  @overload
  def readBinaryArray(self, c, length):
    ...

  @overload
  def readBinaryArray(self, l, length):
    ...

  @overload
  def readBinaryArray(self, f, length):
    ...

  @overload
  def readBinaryArray(self, d, length):
    ...

  def eof(self):
    ...

  def isFileVRML1(self):
    ...

  def isFileVRML2(self):
    ...

  def resetFilePointer(self, fptr):
    ...

  def getLocationString(self, string):
    ...

  @overload
  def putBack(self, c):
    ...

  @overload
  def putBack(self, str):
    ...

  def addReference(self, name, base, addToGlobalDict):
    ...

  def removeReference(self, name):
    ...

  def findReference(self, name):
    ...

  @staticmethod
  def addDirectoryFirst(dirName):
    ...

  @staticmethod
  def addDirectoryLast(dirName):
    ...

  @staticmethod
  def addEnvDirectoriesFirst(envVarName, separator):
    ...

  @staticmethod
  def addEnvDirectoriesLast(envVarName, separator):
    ...

  @staticmethod
  def removeDirectory(dirName):
    ...

  @staticmethod
  def clearDirectories():
    ...

  @staticmethod
  def getDirectories():
    ...

  @staticmethod
  def init():
    ...

  @overload
  @staticmethod
  def getPathname(filename):
    ...

  @overload
  @staticmethod
  def getPathname(s):
    ...

  @overload
  @staticmethod
  def getBasename(filename):
    ...

  @overload
  @staticmethod
  def getBasename(s):
    ...

  @staticmethod
  def searchForFile(basename, directories, subdirectories):
    ...

class SoOutput:
  # Stage
  COUNT_REFS: "SoSFEnum" = ...
  WRITE: "SoSFEnum" = ...
  # Annotations
  ADDRESSES: "SoSFEnum" = ...
  REF_COUNTS: "SoSFEnum" = ...
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, dictOut):
    ...

  @overload
  def __init__(self):
    ...

  def setFilePointer(self, newFP):
    ...

  def getFilePointer(self):
    ...

  def openFile(self, fileName):
    ...

  def closeFile(self):
    ...

  def setCompression(self, compmethod, level):
    ...

  @staticmethod
  def getAvailableCompressionMethods(num):
    ...

  def setBuffer(self, bufPointer, initSize, reallocFunc, offset):
    ...

  def getBuffer(self, bufPointer, nBytes):
    ...

  def getBufferSize(self):
    ...

  def resetBuffer(self):
    ...

  def setBinary(self, flag):
    ...

  def isBinary(self):
    ...

  def setHeaderString(self, str):
    ...

  def resetHeaderString(self):
    ...

  def setFloatPrecision(self, precision):
    ...

  def setStage(self, stage):
    ...

  def getStage(self):
    ...

  def incrementIndent(self, levels):
    ...

  def decrementIndent(self, levels):
    ...

  @overload
  def write(self, c):
    ...

  @overload
  def write(self, s):
    ...

  @overload
  def write(self, s):
    ...

  @overload
  def write(self, n):
    ...

  @overload
  def write(self, i):
    ...

  @overload
  def write(self, i):
    ...

  @overload
  def write(self, s):
    ...

  @overload
  def write(self, s):
    ...

  @overload
  def write(self, f):
    ...

  @overload
  def write(self, d):
    ...

  @overload
  def writeBinaryArray(self, c, length):
    ...

  @overload
  def writeBinaryArray(self, l, length):
    ...

  @overload
  def writeBinaryArray(self, f, length):
    ...

  @overload
  def writeBinaryArray(self, d, length):
    ...

  def indent(self):
    ...

  def reset(self):
    ...

  def setCompact(self, flag):
    ...

  def isCompact(self):
    ...

  def setAnnotation(self, bits):
    ...

  def getAnnotation(self):
    ...

  @staticmethod
  def getDefaultASCIIHeader():
    ...

  @staticmethod
  def getDefaultBinaryHeader():
    ...

  def addReference(self, base):
    ...

  def findReference(self, base):
    ...

  def setReference(self, base, refid):
    ...

  def addDEFNode(self, name):
    ...

  def lookupDEFNode(self, name):
    ...

  def removeDEFNode(self, name):
    ...

  def pushProto(self, proto):
    ...

  def getCurrentProto(self):
    ...

  def popProto(self):
    ...

  def addRoute(self, from_, fromfield, to, tofield):
    ...

  def resolveRoutes(self):
    ...

class SoPath(SoBase):
  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, approxlength):
    ...

  @overload
  def __init__(self, head):
    ...

  @overload
  def __init__(self, rhs):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def setHead(self, head):
    ...

  def getHead(self):
    ...

  @overload
  def append(self, childindex):
    ...

  @overload
  def append(self, node):
    ...

  @overload
  def append(self, frompath):
    ...

  def push(self, childindex):
    ...

  def pop(self):
    ...

  def getTail(self):
    ...

  def getNode(self, index):
    ...

  def getNodeFromTail(self, index):
    ...

  def getIndex(self, index):
    ...

  def getIndexFromTail(self, index):
    ...

  def getLength(self):
    ...

  def truncate(self, length):
    ...

  def findFork(self, path):
    ...

  def findNode(self, node):
    ...

  def containsNode(self, node):
    ...

  def containsPath(self, path):
    ...

  def copy(self, startfromnodeindex, numnodes):
    ...

  @overload
  @staticmethod
  def getByName(name):
    ...

  @overload
  @staticmethod
  def getByName(name, l):
    ...

  def insertIndex(self, parent, newindex):
    ...

  def removeIndex(self, parent, oldindex):
    ...

  def replaceIndex(self, parent, index, newchild):
    ...

  def isRelevantNotification(self, l):
    ...

  def write(self, action):
    ...

class SoLightPath:
  @overload
  def __init__(self, node, approxlength):
    ...

  @overload
  def __init__(self, approxlength):
    ...

  @overload
  def __init__(self):
    ...

  def setHead(self, node):
    ...

  def append(self, childindex):
    ...

  def push(self, childindex):
    ...

  def pop(self):
    ...

  def setTail(self, childindex):
    ...

  def getTail(self):
    ...

  def getHead(self):
    ...

  def getNode(self, index):
    ...

  def getIndex(self, index):
    ...

  def getFullLength(self):
    ...

  def truncate(self, startindex):
    ...

  def makeTempPath(self, path):
    ...

class SoFullPath(SoPath):
  def pop(self):
    ...

  def getTail(self):
    ...

  def getNodeFromTail(self, index):
    ...

  def getIndexFromTail(self, index):
    ...

  def getLength(self):
    ...

class SoTempPath(SoFullPath):
  def __init__(self, approxlength):
    ...

  def simpleAppend(self, node, index):
    ...

  def replaceTail(self, node, index):
    ...

class SbPimplPtr:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, initial):
    ...

  @overload
  def __init__(self, copy):
    ...

  @overload
  def __init__(self):
    ...

  def set(self, value):
    ...

  def get(self):
    ...

class SoActionMethodList(SbPList):
  @overload
  def __init__(self, parentlist):
    ...

  @overload
  def __init__(self):
    ...

  def addMethod(self, node, method):
    ...

  def setUp(self):
    ...

class SoAction:
  # AppliedCode
  NODE: "SoSFEnum" = ...
  PATH: "SoSFEnum" = ...
  PATH_LIST: "SoSFEnum" = ...
  # PathCode
  NO_PATH: "SoSFEnum" = ...
  IN_PATH: "SoSFEnum" = ...
  BELOW_PATH: "SoSFEnum" = ...
  OFF_PATH: "SoSFEnum" = ...
  @staticmethod
  def initClass():
    ...

  @staticmethod
  def initClasses():
    ...

  def __init__(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def isOfType(self, type):
    ...

  @overload
  def apply(self, root):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  @overload
  def apply(self, beingApplied):
    ...

  def invalidateState(self):
    ...

  @staticmethod
  def nullAction(action, node):
    ...

  def getWhatAppliedTo(self):
    ...

  def getNodeAppliedTo(self):
    ...

  def getPathAppliedTo(self):
    ...

  def getPathListAppliedTo(self):
    ...

  def getOriginalPathListAppliedTo(self):
    ...

  def isLastPathListAppliedTo(self):
    ...

  def getPathCode(self, numindices, indices):
    ...

  def traverse(self, node):
    ...

  def hasTerminated(self):
    ...

  def getCurPath(self):
    ...

  def getState(self):
    ...

  def getCurPathCode(self):
    ...

  def getCurPathTail(self):
    ...

  def usePathCode(self, numindices, indices):
    ...

  @overload
  def pushCurPath(self, childindex, node):
    ...

  @overload
  def pushCurPath(self):
    ...

  @overload
  def popCurPath(self, prevpathcode):
    ...

  @overload
  def popCurPath(self):
    ...

  def popPushCurPath(self, childindex, node):
    ...

  def switchToPathTraversal(self, path):
    ...

  def switchToNodeTraversal(self, node):
    ...

class SoState:
  @overload
  def __init__(self, action, enabledelements):
    ...

  @overload
  def __init__(self):
    ...

  def getAction(self):
    ...

  def getElement(self, stackindex):
    ...

  def getConstElement(self, stackindex):
    ...

  def push(self):
    ...

  def pop(self):
    ...

  def print(self, file):
    ...

  def isElementEnabled(self, stackindex):
    ...

  def getDepth(self):
    ...

  def setCacheOpen(self, flag):
    ...

  def isCacheOpen(self):
    ...

  def getElementNoPush(self, stackindex):
    ...

class SoElement:
  @staticmethod
  def initClass():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  def getTypeId(self):
    ...

  def getStackIndex(self):
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def pop(self, state, prevTopElement):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  @staticmethod
  def initElements():
    ...

  @staticmethod
  def getNumStackIndices():
    ...

  @staticmethod
  def getIdFromStackIndex(stackIndex):
    ...

  def setDepth(self, depth):
    ...

  def getDepth(self):
    ...

  def print(self, file):
    ...

  def __init__(self):
    ...

class SoInt32Element(SoElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  def print(self, file):
    ...

  @overload
  @staticmethod
  def set(index, state, node, value):
    ...

  @overload
  @staticmethod
  def set(index, state, value):
    ...

  @staticmethod
  def get(index, state):
    ...

  def setElt(self, value):
    ...

class SoDecimationTypeElement(SoInt32Element):
  # Type
  AUTOMATIC: "SoSFEnum" = ...
  HIGHEST: "SoSFEnum" = ...
  LOWEST: "SoSFEnum" = ...
  PERCENTAGE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, type):
    ...

  @overload
  @staticmethod
  def set(state, node, type):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoFieldData:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, fd):
    ...

  @overload
  def __init__(self, fd):
    ...

  @overload
  def __init__(self, numfields):
    ...

  @overload
  def __init__(self):
    ...

  def addField(self, base, name, field):
    ...

  def overlay(self, to, from_, copyconnections):
    ...

  def getNumFields(self):
    ...

  def getFieldName(self, index):
    ...

  def getField(self, object, index):
    ...

  def getIndex(self, fc, field):
    ...

  def addEnumValue(self, enumname, valuename, value):
    ...

  def getEnumData(self, enumname, num, values, names):
    ...

  @overload
  def read(self, input, object, erroronunknownfield, notbuiltin):
    ...

  @overload
  def read(self, input, object, fieldname, foundname):
    ...

  def write(self, out, object):
    ...

  def copy(self, src):
    ...

  def isSame(self, c1, c2):
    ...

  def readFieldDescriptions(self, input, object, numdescriptionsexpected, readfieldvalues):
    ...

  def writeFieldDescriptions(self, out, object):
    ...

class SoField:
  # FieldType
  NORMAL_FIELD: "SoSFEnum" = ...
  EVENTIN_FIELD: "SoSFEnum" = ...
  EVENTOUT_FIELD: "SoSFEnum" = ...
  EXPOSED_FIELD: "SoSFEnum" = ...
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def initClasses():
    ...

  @staticmethod
  def cleanupClass():
    ...

  def setIgnored(self, ignore):
    ...

  def isIgnored(self):
    ...

  def setDefault(self, defaultVal):
    ...

  def isDefault(self):
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def isOfType(self, type):
    ...

  def enableConnection(self, flag):
    ...

  def isConnectionEnabled(self):
    ...

  @overload
  def connectFrom(self, master, notnotify, append):
    ...

  @overload
  def connectFrom(self, master, notnotify, append):
    ...

  @overload
  def appendConnection(self, master, notnotify):
    ...

  @overload
  def appendConnection(self, master, notnotify):
    ...

  @overload
  def disconnect(self, engineoutput):
    ...

  @overload
  def disconnect(self, field):
    ...

  @overload
  def disconnect(self):
    ...

  def isConnectedFromEngine(self):
    ...

  def getConnectedEngine(self, master):
    ...

  def isConnectedFromField(self):
    ...

  def getConnectedField(self, master):
    ...

  def getNumConnections(self):
    ...

  def getForwardConnections(self, slavelist):
    ...

  def getConnections(self, masterlist):
    ...

  def isConnected(self):
    ...

  def setContainer(self, cont):
    ...

  def getContainer(self):
    ...

  def set(self, valuestring):
    ...

  def get(self, valuestring):
    ...

  def shouldWrite(self):
    ...

  def touch(self):
    ...

  def startNotify(self):
    ...

  def notify(self, nlist):
    ...

  def enableNotify(self, on):
    ...

  def isNotifyEnabled(self):
    ...

  def addAuditor(self, f, type):
    ...

  def removeAuditor(self, f, type):
    ...

  def connectionStatusChanged(self, numconnections):
    ...

  def isReadOnly(self):
    ...

  def isSame(self, f):
    ...

  def copyFrom(self, f):
    ...

  def fixCopy(self, copyconnections):
    ...

  def referencesCopy(self):
    ...

  def copyConnection(self, fromfield):
    ...

  def read(self, input, name):
    ...

  def write(self, out, name):
    ...

  def countWriteRefs(self, out):
    ...

  def setFieldType(self, type):
    ...

  def getFieldType(self):
    ...

  def getDirty(self):
    ...

  def setDirty(self, dirty):
    ...

  def evaluate(self):
    ...

class SoMField(SoField):
  def __init__(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def atexit_cleanup():
    ...

  def getNum(self):
    ...

  def setNum(self, num):
    ...

  def deleteValues(self, start, num):
    ...

  def insertSpace(self, start, num):
    ...

  def set1(self, index, valuestring):
    ...

  def get1(self, index, valuestring):
    ...

  @staticmethod
  def initClass():
    ...

  def enableDeleteValues(self):
    ...

  def isDeleteValuesEnabled(self):
    ...

class SoSField(SoField):
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def atexit_cleanup():
    ...

class SoSFEnum(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, name):
    ...

  @staticmethod
  def initClass():
    ...

  def setEnums(self, num, vals, names):
    ...

  def getNumEnums(self):
    ...

  def getEnum(self, idx, name):
    ...

class SoSFFloat(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoComplexityTypeElement(SoInt32Element):
  # Type
  OBJECT_SPACE: "SoSFEnum" = ...
  SCREEN_SPACE: "SoSFEnum" = ...
  BOUNDING_BOX: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, type):
    ...

  @overload
  @staticmethod
  def set(state, type):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoComplexity(SoNode):
  # Type
  OBJECT_SPACE: "SoSFEnum" = ...
  SCREEN_SPACE: "SoSFEnum" = ...
  BOUNDING_BOX: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  type: SoSFEnum = ...
  value: SoSFFloat = ...
  textureQuality: SoSFFloat = ...
class SoDrawStyleElement(SoInt32Element):
  # Style
  FILLED: "SoSFEnum" = ...
  LINES: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  INVISIBLE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, style):
    ...

  @overload
  @staticmethod
  def set(state, style):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoSFUShort(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoSFInt32(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoDrawStyle(SoNode):
  # Style
  FILLED: "SoSFEnum" = ...
  LINES: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  INVISIBLE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  style: SoSFEnum = ...
  pointSize: SoSFFloat = ...
  lineWidth: SoSFFloat = ...
  linePattern: SoSFUShort = ...
  linePatternScaleFactor: SoSFInt32 = ...
class SoError:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def setHandlerCallback(func, data):
    ...

  @staticmethod
  def getHandlerCallback():
    ...

  @staticmethod
  def getHandlerData():
    ...

  def getDebugString(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def isOfType(self, type):
    ...

  @staticmethod
  def post(format):
    ...

  @overload
  @staticmethod
  def getString(node):
    ...

  @overload
  @staticmethod
  def getString(path):
    ...

  @overload
  @staticmethod
  def getString(engine):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def initClasses():
    ...

class SoDebugError(SoError):
  # Severity
  ERROR: "SoSFEnum" = ...
  WARNING: "SoSFEnum" = ...
  INFO: "SoSFEnum" = ...
  @staticmethod
  def setHandlerCallback(function, data):
    ...

  @staticmethod
  def getHandlerCallback():
    ...

  @staticmethod
  def getHandlerData():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def getSeverity(self):
    ...

  @staticmethod
  def post(source, format):
    ...

  @staticmethod
  def postWarning(source, format):
    ...

  @staticmethod
  def postInfo(source, format):
    ...

  @staticmethod
  def initClass():
    ...

class SbVec3f:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, p0, p1, p2):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, barycentric, v0, v1, v2):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z):
    ...

  def equals(self, v, tolerance):
    ...

  def cross(self, v):
    ...

  def dot(self, v):
    ...

  def getClosestAxis(self):
    ...

  def length(self):
    ...

  def sqrLength(self):
    ...

  def normalize(self):
    ...

  def negate(self):
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SbColor(SbVec3f):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, rgb):
    ...

  @overload
  def __init__(self, r, g, b):
    ...

  @overload
  def setHSVValue(self, h, s, v):
    ...

  @overload
  def setHSVValue(self, hsv):
    ...

  @overload
  def getHSVValue(self, h, s, v):
    ...

  @overload
  def getHSVValue(self, hsv):
    ...

  def setPackedValue(self, rgba, transparency):
    ...

  def getPackedValue(self, transparency):
    ...

class SoLazyElement(SoElement):
  # cases
  LIGHT_MODEL_CASE: "SoSFEnum" = ...
  COLOR_MATERIAL_CASE: "SoSFEnum" = ...
  DIFFUSE_CASE: "SoSFEnum" = ...
  AMBIENT_CASE: "SoSFEnum" = ...
  EMISSIVE_CASE: "SoSFEnum" = ...
  SPECULAR_CASE: "SoSFEnum" = ...
  SHININESS_CASE: "SoSFEnum" = ...
  BLENDING_CASE: "SoSFEnum" = ...
  TRANSPARENCY_CASE: "SoSFEnum" = ...
  VERTEXORDERING_CASE: "SoSFEnum" = ...
  TWOSIDE_CASE: "SoSFEnum" = ...
  CULLING_CASE: "SoSFEnum" = ...
  SHADE_MODEL_CASE: "SoSFEnum" = ...
  ALPHATEST_CASE: "SoSFEnum" = ...
  GLIMAGE_CASE: "SoSFEnum" = ...
  LAZYCASES_LAST: "SoSFEnum" = ...
  # masks
  LIGHT_MODEL_MASK: "SoSFEnum" = ...
  COLOR_MATERIAL_MASK: "SoSFEnum" = ...
  DIFFUSE_MASK: "SoSFEnum" = ...
  AMBIENT_MASK: "SoSFEnum" = ...
  EMISSIVE_MASK: "SoSFEnum" = ...
  SPECULAR_MASK: "SoSFEnum" = ...
  SHININESS_MASK: "SoSFEnum" = ...
  TRANSPARENCY_MASK: "SoSFEnum" = ...
  BLENDING_MASK: "SoSFEnum" = ...
  VERTEXORDERING_MASK: "SoSFEnum" = ...
  TWOSIDE_MASK: "SoSFEnum" = ...
  CULLING_MASK: "SoSFEnum" = ...
  SHADE_MODEL_MASK: "SoSFEnum" = ...
  ALPHATEST_MASK: "SoSFEnum" = ...
  GLIMAGE_MASK: "SoSFEnum" = ...
  ALL_MASK: "SoSFEnum" = ...
  # internalMasks
  OTHER_COLOR_MASK: "SoSFEnum" = ...
  ALL_COLOR_MASK: "SoSFEnum" = ...
  NO_COLOR_MASK: "SoSFEnum" = ...
  ALL_BUT_DIFFUSE_MASK: "SoSFEnum" = ...
  DIFFUSE_ONLY_MASK: "SoSFEnum" = ...
  # LightModel
  BASE_COLOR: "SoSFEnum" = ...
  PHONG: "SoSFEnum" = ...
  # VertexOrdering
  CW: "SoSFEnum" = ...
  CCW: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def matches(self, SoElement_):
    ...

  def copyMatchInfo(self):
    ...

  @staticmethod
  def setToDefault(state):
    ...

  @staticmethod
  def setDiffuse(state, node, numcolors, colors, packer):
    ...

  @staticmethod
  def setTransparency(state, node, numvalues, transparency, packer):
    ...

  @staticmethod
  def setPacked(state, node, numcolors, colors, packedtransparency):
    ...

  @staticmethod
  def setColorIndices(state, node, numindices, indices):
    ...

  @staticmethod
  def setAmbient(state, color):
    ...

  @staticmethod
  def setEmissive(state, color):
    ...

  @staticmethod
  def setSpecular(state, color):
    ...

  @staticmethod
  def setShininess(state, value):
    ...

  @staticmethod
  def setColorMaterial(state, value):
    ...

  @staticmethod
  def enableBlending(state, sfactor, dfactor):
    ...

  @staticmethod
  def enableSeparateBlending(state, sfactor, dfactor, alpha_sfactor, alpha_dfactor):
    ...

  @staticmethod
  def disableBlending(state):
    ...

  @staticmethod
  def setLightModel(state, model):
    ...

  @staticmethod
  def setVertexOrdering(state, ordering):
    ...

  @staticmethod
  def setBackfaceCulling(state, onoff):
    ...

  @staticmethod
  def setTwosideLighting(state, onoff):
    ...

  @staticmethod
  def setShadeModel(state, flatshading):
    ...

  @staticmethod
  def setAlphaTest(state, func, value):
    ...

  @staticmethod
  def getDiffuse(state, index):
    ...

  @staticmethod
  def getTransparency(SoState_, index):
    ...

  @staticmethod
  def getPackedColors(SoState_):
    ...

  @staticmethod
  def getColorIndices(SoState_):
    ...

  @staticmethod
  def getColorIndex(SoState_, num):
    ...

  @staticmethod
  def getAmbient(SoState_):
    ...

  @staticmethod
  def getEmissive(SoState_):
    ...

  @staticmethod
  def getSpecular(SoState_):
    ...

  @staticmethod
  def getShininess(SoState_):
    ...

  @staticmethod
  def getColorMaterial(SoState_):
    ...

  @staticmethod
  def getBlending(SoState_, sfactor, dfactor):
    ...

  @staticmethod
  def getAlphaBlending(SoState_, sfactor, dfactor):
    ...

  @staticmethod
  def getLightModel(SoState_):
    ...

  @staticmethod
  def getAlphaTest(state, value):
    ...

  @staticmethod
  def getTwoSidedLighting(state):
    ...

  def getNumDiffuse(self):
    ...

  def getNumTransparencies(self):
    ...

  def getNumColorIndices(self):
    ...

  def isPacked(self):
    ...

  def isTransparent(self):
    ...

  @staticmethod
  def getInstance(state):
    ...

  @staticmethod
  def getDefaultAmbientIntensity():
    ...

  @staticmethod
  def getDefaultDiffuse():
    ...

  @staticmethod
  def getDefaultAmbient():
    ...

  @staticmethod
  def getDefaultSpecular():
    ...

  @staticmethod
  def getDefaultEmissive():
    ...

  @staticmethod
  def getDefaultShininess():
    ...

  @staticmethod
  def getDefaultPacked():
    ...

  @staticmethod
  def getDefaultTransparency():
    ...

  @staticmethod
  def getDefaultLightModel():
    ...

  @staticmethod
  def getDefaultColorIndex():
    ...

  @staticmethod
  def setMaterials(state, node, bitmask, cPacker, diffuse, numdiffuse, transp, numtransp, ambient, emissive, specular, shininess, istransparent):
    ...

  @staticmethod
  def getWInstance(state):
    ...

  def getPackedPointer(self):
    ...

  def getDiffusePointer(self):
    ...

  def getColorIndexPointer(self):
    ...

  def getTransparencyPointer(self):
    ...

  @staticmethod
  def setTransparencyType(state, type):
    ...

class SoColorPacker:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def getPackedColors(self):
    ...

  def diffuseMatch(self, nodeid):
    ...

  def transpMatch(self, nodeid):
    ...

  def setNodeIds(self, diffuse, transp):
    ...

  def getSize(self):
    ...

  def reallocate(self, size):
    ...

  def getDiffuseId(self):
    ...

  def getTranspId(self):
    ...

class SoLightModel(SoNode):
  # Model
  BASE_COLOR: "SoSFEnum" = ...
  PHONG: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  model: SoSFEnum = ...
class SoMaterialBindingElement(SoInt32Element):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_PART: "SoSFEnum" = ...
  PER_PART_INDEXED: "SoSFEnum" = ...
  PER_FACE: "SoSFEnum" = ...
  PER_FACE_INDEXED: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, binding):
    ...

  @overload
  @staticmethod
  def set(state, binding):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoMaterialBinding(SoNode):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_PART: "SoSFEnum" = ...
  PER_PART_INDEXED: "SoSFEnum" = ...
  PER_FACE: "SoSFEnum" = ...
  PER_FACE_INDEXED: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  value: SoSFEnum = ...
class SoNormalBindingElement(SoInt32Element):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_PART: "SoSFEnum" = ...
  PER_PART_INDEXED: "SoSFEnum" = ...
  PER_FACE: "SoSFEnum" = ...
  PER_FACE_INDEXED: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, binding):
    ...

  @overload
  @staticmethod
  def set(state, binding):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoNormalBinding(SoNode):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_PART: "SoSFEnum" = ...
  PER_PART_INDEXED: "SoSFEnum" = ...
  PER_FACE: "SoSFEnum" = ...
  PER_FACE_INDEXED: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  value: SoSFEnum = ...
class SoPickStyleElement(SoInt32Element):
  # Style
  SHAPE: "SoSFEnum" = ...
  BOUNDING_BOX: "SoSFEnum" = ...
  UNPICKABLE: "SoSFEnum" = ...
  SHAPE_ON_TOP: "SoSFEnum" = ...
  BOUNDING_BOX_ON_TOP: "SoSFEnum" = ...
  SHAPE_FRONTFACES: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, style):
    ...

  @overload
  @staticmethod
  def set(state, style):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoPickStyle(SoNode):
  # Style
  SHAPE: "SoSFEnum" = ...
  BOUNDING_BOX: "SoSFEnum" = ...
  UNPICKABLE: "SoSFEnum" = ...
  SHAPE_ON_TOP: "SoSFEnum" = ...
  BOUNDING_BOX_ON_TOP: "SoSFEnum" = ...
  SHAPE_FRONTFACES: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  style: SoSFEnum = ...
class SoShapeHintsElement(SoElement):
  # VertexOrdering
  UNKNOWN_ORDERING: "SoSFEnum" = ...
  CLOCKWISE: "SoSFEnum" = ...
  COUNTERCLOCKWISE: "SoSFEnum" = ...
  ORDERING_AS_IS: "SoSFEnum" = ...
  # ShapeType
  UNKNOWN_SHAPE_TYPE: "SoSFEnum" = ...
  SOLID: "SoSFEnum" = ...
  SHAPE_TYPE_AS_IS: "SoSFEnum" = ...
  # FaceType
  UNKNOWN_FACE_TYPE: "SoSFEnum" = ...
  CONVEX: "SoSFEnum" = ...
  FACE_TYPE_AS_IS: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def pop(self, state, prevtopelement):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  @overload
  @staticmethod
  def set(state, node, vertexOrdering, shapeType, faceType):
    ...

  @overload
  @staticmethod
  def set(state, vertexOrdering, shapeType, faceType):
    ...

  @staticmethod
  def get(state, vertexOrdering, shapeType, faceType):
    ...

  @staticmethod
  def getVertexOrdering(state):
    ...

  @staticmethod
  def getShapeType(state):
    ...

  @staticmethod
  def getFaceType(state):
    ...

  @staticmethod
  def getDefaultVertexOrdering():
    ...

  @staticmethod
  def getDefaultShapeType():
    ...

  @staticmethod
  def getDefaultFaceType():
    ...

  def print(self, file):
    ...

class SoSFBool(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoShapeHints(SoNode):
  # VertexOrdering
  UNKNOWN_ORDERING: "SoSFEnum" = ...
  CLOCKWISE: "SoSFEnum" = ...
  COUNTERCLOCKWISE: "SoSFEnum" = ...
  # ShapeType
  UNKNOWN_SHAPE_TYPE: "SoSFEnum" = ...
  SOLID: "SoSFEnum" = ...
  # FaceType
  UNKNOWN_FACE_TYPE: "SoSFEnum" = ...
  CONVEX: "SoSFEnum" = ...
  # WindingType
  NO_WINDING_TYPE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def pick(self, action):
    ...

  vertexOrdering: SoSFEnum = ...
  shapeType: SoSFEnum = ...
  faceType: SoSFEnum = ...
  windingType: SoSFEnum = ...
  useVBO: SoSFBool = ...
  creaseAngle: SoSFFloat = ...
class SoTexture(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def cleanupClass():
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

class SbVec2s:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y):
    ...

  def dot(self, v):
    ...

  def negate(self):
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SoSFImage(SoSField):
  # CopyPolicy
  COPY: "SoSFEnum" = ...
  NO_COPY: "SoSFEnum" = ...
  NO_COPY_AND_DELETE: "SoSFEnum" = ...
  NO_COPY_AND_FREE: "SoSFEnum" = ...
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def getValue(self, size, nc):
    ...

  @overload
  def getValue(self):
    ...

  def setValue(self, size, nc, pixels, copypolicy):
    ...

  def startEditing(self, size, nc):
    ...

  def finishEditing(self):
    ...

  def setSubValue(self, dims, offset, pixels):
    ...

  def setSubValues(self, dims, offsets, num, pixelblocks):
    ...

  def getSubTexture(self, idx, dims, offset):
    ...

  def hasSubTextures(self, numsubtextures):
    ...

  def setNeverWrite(self, flag):
    ...

  def isNeverWrite(self):
    ...

  def hasTransparency(self):
    ...

class SoSFString(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, str):
    ...

  @staticmethod
  def initClass():
    ...

class SoSFColor(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, vec):
    ...

  @overload
  def setValue(self, red, green, blue):
    ...

  @overload
  def setValue(self, rgb):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def setHSVValue(self, h, s, v):
    ...

  @overload
  def setHSVValue(self, hsv):
    ...

class SoReplacedElement(SoElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  def getNodeId(self):
    ...

  def print(self, file):
    ...

class SbVec3s:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z):
    ...

  def dot(self, v):
    ...

  def negate(self):
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SoMultiTextureImageElement(SoElement):
  # Model
  BLEND: "SoSFEnum" = ...
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  REPLACE: "SoSFEnum" = ...
  # Wrap
  CLAMP: "SoSFEnum" = ...
  REPEAT: "SoSFEnum" = ...
  CLAMP_TO_BORDER: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @staticmethod
  def setDefault(state, node, unit):
    ...

  @overload
  @staticmethod
  def set(state, node, unit, size, numComponents, bytes, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def set(state, node, unit, size, numComponents, bytes, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def set(state, node, size, numComponents, bytes, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def set(state, node, size, numComponents, bytes, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def set(state, node, size, numComponents, bytes, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def set(state, node, size, numComponents, bytes, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, unit, size, numComponents, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, unit, size, numComponents, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, size, numComponents, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, size, numComponents, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, size, numComponents, wrapS, wrapT, model, blendColor):
    ...

  @overload
  @staticmethod
  def get(state, size, numComponents, wrapS, wrapT, wrapR, model, blendColor):
    ...

  @overload
  @staticmethod
  def getImage(state, unit, size, numComponents):
    ...

  @overload
  @staticmethod
  def getImage(state, unit, size, numComponents):
    ...

  @overload
  @staticmethod
  def getImage(state, size, numComponents):
    ...

  @overload
  @staticmethod
  def getImage(state, size, numComponents):
    ...

  @staticmethod
  def getBlendColor(state, unit):
    ...

  @staticmethod
  def getModel(state, unit):
    ...

  @staticmethod
  def getWrapS(state, unit):
    ...

  @staticmethod
  def getWrapT(state, unit):
    ...

  @staticmethod
  def getWrapR(state, unit):
    ...

  @staticmethod
  def containsTransparency(state):
    ...

  @overload
  @staticmethod
  def getDefault(size, numComponents):
    ...

  @overload
  @staticmethod
  def getDefault(size, numComponents):
    ...

  def push(self, state):
    ...

  def matches(self, elem):
    ...

  def copyMatchInfo(self):
    ...

  @overload
  def setElt(self, unit, nodeid, size, numComponents, bytes, wrapS, wrapT, model, blendColor):
    ...

  @overload
  def setElt(self, unit, nodeid, size, numComponents, bytes, wrapS, wrapT, wrapR, model, blendColor):
    ...

  def hasTransparency(self, unit):
    ...

class SoTexture2(SoTexture):
  # Model
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  REPLACE: "SoSFEnum" = ...
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def rayPick(self, action):
    ...

  @staticmethod
  def readImage(fname, w, h, nc, bytes):
    ...

  filename: SoSFString = ...
  image: SoSFImage = ...
  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
  model: SoSFEnum = ...
  blendColor: SoSFColor = ...
  enableCompressedTexture: SoSFBool = ...
class SoTextureCoordinateBindingElement(SoInt32Element):
  # Binding
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, binding):
    ...

  @overload
  @staticmethod
  def set(state, binding):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoTextureCoordinateBinding(SoNode):
  # Binding
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  value: SoSFEnum = ...
class SoTransformation(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

class SoUnits(SoTransformation):
  # Units
  METERS: "SoSFEnum" = ...
  CENTIMETERS: "SoSFEnum" = ...
  MILLIMETERS: "SoSFEnum" = ...
  MICROMETERS: "SoSFEnum" = ...
  MICRONS: "SoSFEnum" = ...
  NANOMETERS: "SoSFEnum" = ...
  ANGSTROMS: "SoSFEnum" = ...
  KILOMETERS: "SoSFEnum" = ...
  FEET: "SoSFEnum" = ...
  INCHES: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  YARDS: "SoSFEnum" = ...
  MILES: "SoSFEnum" = ...
  NAUTICAL_MILES: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  units: SoSFEnum = ...
class SoCallbackAction(SoAction):
  # Response
  CONTINUE: "SoSFEnum" = ...
  ABORT: "SoSFEnum" = ...
  PRUNE: "SoSFEnum" = ...
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, vp):
    ...

  @overload
  def __init__(self):
    ...

  def setViewportRegion(self, vp):
    ...

  def addPreCallback(self, type, cb, userdata):
    ...

  def addPostCallback(self, type, cb, userdata):
    ...

  def addPreTailCallback(self, cb, userdata):
    ...

  def addPostTailCallback(self, cb, userdata):
    ...

  def addTriangleCallback(self, type, cb, userdata):
    ...

  def addLineSegmentCallback(self, type, cb, userdata):
    ...

  def addPointCallback(self, type, cb, userdata):
    ...

  def getDecimationType(self):
    ...

  def getDecimationPercentage(self):
    ...

  def getComplexity(self):
    ...

  def getComplexityType(self):
    ...

  def getNumCoordinates(self):
    ...

  def getCoordinate3(self, index):
    ...

  def getCoordinate4(self, index):
    ...

  def getDrawStyle(self):
    ...

  def getLinePattern(self):
    ...

  def getLineWidth(self):
    ...

  def getPointSize(self):
    ...

  def getFontName(self):
    ...

  def getFontSize(self):
    ...

  def getLightModel(self):
    ...

  def getLightAttenuation(self):
    ...

  def getMaterial(self, ambient, diffuse, specular, emission, shininess, transparency, index):
    ...

  def getMaterialBinding(self):
    ...

  def getNumNormals(self):
    ...

  def getNormal(self, index):
    ...

  def getNormalBinding(self):
    ...

  def getNumProfileCoordinates(self):
    ...

  def getProfileCoordinate2(self, index):
    ...

  def getProfileCoordinate3(self, index):
    ...

  def getProfile(self):
    ...

  def getVertexOrdering(self):
    ...

  def getShapeType(self):
    ...

  def getFaceType(self):
    ...

  def getCreaseAngle(self):
    ...

  def getNumTextureCoordinates(self):
    ...

  def getTextureCoordinate2(self, index):
    ...

  def getTextureCoordinate3(self, index):
    ...

  def getTextureCoordinate4(self, index):
    ...

  def getTextureCoordinateBinding(self):
    ...

  def getTextureBlendColor(self):
    ...

  @overload
  def getTextureImage(self, size, numcomps):
    ...

  @overload
  def getTextureImage(self, size, numcomps):
    ...

  def getTextureMatrix(self):
    ...

  def getTextureModel(self):
    ...

  def getTextureWrapS(self):
    ...

  def getTextureWrapT(self):
    ...

  def getTextureWrapR(self):
    ...

  def getModelMatrix(self):
    ...

  def getUnits(self):
    ...

  def getFocalDistance(self):
    ...

  def getProjectionMatrix(self):
    ...

  def getViewingMatrix(self):
    ...

  def getViewVolume(self):
    ...

  def getViewportRegion(self):
    ...

  def getPickStyle(self):
    ...

  def getSwitch(self):
    ...

  def getCurrentResponse(self):
    ...

  def invokePreCallbacks(self, node):
    ...

  def invokePostCallbacks(self, node):
    ...

  def invokeTriangleCallbacks(self, shape, v1, v2, v3):
    ...

  def invokeLineSegmentCallbacks(self, shape, v1, v2):
    ...

  def invokePointCallbacks(self, shape, v):
    ...

  def shouldGeneratePrimitives(self, shape):
    ...

  def getCurPathTail(self):
    ...

  def setCurrentNode(self, node):
    ...

  def setCallbackAll(self, callbackall):
    ...

  def isCallbackAll(self):
    ...

class SbVec2f:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y):
    ...

  def dot(self, v):
    ...

  def equals(self, v, tolerance):
    ...

  def length(self):
    ...

  def sqrLength(self):
    ...

  def negate(self):
    ...

  def normalize(self):
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SbViewportRegion:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, width, height):
    ...

  @overload
  def __init__(self, winSize):
    ...

  @overload
  def __init__(self, vpReg):
    ...

  @overload
  def setWindowSize(self, width, height):
    ...

  @overload
  def setWindowSize(self, winSize):
    ...

  @overload
  def setViewport(self, left, bottom, width, height):
    ...

  @overload
  def setViewport(self, origin, size):
    ...

  @overload
  def setViewportPixels(self, left, bottom, width, height):
    ...

  @overload
  def setViewportPixels(self, origin, size):
    ...

  def getWindowSize(self):
    ...

  def getViewportOrigin(self):
    ...

  def getViewportOriginPixels(self):
    ...

  def getViewportSize(self):
    ...

  def getViewportSizePixels(self):
    ...

  def getViewportAspectRatio(self):
    ...

  def scaleWidth(self, ratio):
    ...

  def scaleHeight(self, ratio):
    ...

  def setPixelsPerInch(self, ppi):
    ...

  def getPixelsPerInch(self):
    ...

  def getPixelsPerPoint(self):
    ...

  def print(self, file):
    ...

class SoGLRenderAction(SoAction):
  # TransparencyType
  SCREEN_DOOR: "SoSFEnum" = ...
  ADD: "SoSFEnum" = ...
  DELAYED_ADD: "SoSFEnum" = ...
  SORTED_OBJECT_ADD: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  DELAYED_BLEND: "SoSFEnum" = ...
  SORTED_OBJECT_BLEND: "SoSFEnum" = ...
  SORTED_OBJECT_SORTED_TRIANGLE_ADD: "SoSFEnum" = ...
  SORTED_OBJECT_SORTED_TRIANGLE_BLEND: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  SORTED_LAYERS_BLEND: "SoSFEnum" = ...
  # TransparentDelayedObjectRenderType
  ONE_PASS: "SoSFEnum" = ...
  NONSOLID_SEPARATE_BACKFACE_PASS: "SoSFEnum" = ...
  # AbortCode
  CONTINUE: "SoSFEnum" = ...
  ABORT: "SoSFEnum" = ...
  PRUNE: "SoSFEnum" = ...
  DELAY: "SoSFEnum" = ...
  # SortedObjectOrderStrategy
  BBOX_CENTER: "SoSFEnum" = ...
  BBOX_CLOSEST_CORNER: "SoSFEnum" = ...
  BBOX_FARTHEST_CORNER: "SoSFEnum" = ...
  CUSTOM_CALLBACK: "SoSFEnum" = ...
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, viewportregion):
    ...

  @overload
  def __init__(self):
    ...

  def setViewportRegion(self, newregion):
    ...

  def getViewportRegion(self):
    ...

  def setUpdateArea(self, origin, size):
    ...

  def getUpdateArea(self, origin, size):
    ...

  def setAbortCallback(self, func, userdata):
    ...

  def getAbortCallback(self, func_out, userdata_out):
    ...

  def setTransparencyType(self, type):
    ...

  def getTransparencyType(self):
    ...

  def setTransparentDelayedObjectRenderType(self, type):
    ...

  def getTransparentDelayedObjectRenderType(self):
    ...

  def setSmoothing(self, smooth):
    ...

  def isSmoothing(self):
    ...

  def setNumPasses(self, num):
    ...

  def getNumPasses(self):
    ...

  def setPassUpdate(self, flag):
    ...

  def isPassUpdate(self):
    ...

  def setPassCallback(self, func, userdata):
    ...

  def setCacheContext(self, context):
    ...

  def getCacheContext(self):
    ...

  def addDelayedPath(self, path):
    ...

  def isRenderingDelayedPaths(self):
    ...

  def handleTransparency(self, istransparent):
    ...

  def setCurPass(self, passnum, numpasses):
    ...

  def getCurPass(self):
    ...

  def abortNow(self):
    ...

  def setRenderingIsRemote(self, isremote):
    ...

  def getRenderingIsRemote(self):
    ...

  def invalidateState(self):
    ...

  def addPreRenderCallback(self, func, userdata):
    ...

  def removePreRenderCallback(self, func, userdata):
    ...

  def setSortedLayersNumPasses(self, num):
    ...

  def getSortedLayersNumPasses(self):
    ...

  def setSortedObjectOrderStrategy(self, strategy, cb, closure):
    ...

  def setDelayedObjDepthWrite(self, write):
    ...

  def getDelayedObjDepthWrite(self):
    ...

  def isRenderingTranspPaths(self):
    ...

  def isRenderingTranspBackfaces(self):
    ...

class SoBoxHighlightRenderAction(SoGLRenderAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, viewportregion):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def apply(self, node):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  def setVisible(self, visible):
    ...

  def isVisible(self):
    ...

  def setColor(self, color):
    ...

  def getColor(self):
    ...

  def setLinePattern(self, pattern):
    ...

  def getLinePattern(self):
    ...

  def setLineWidth(self, width):
    ...

  def getLineWidth(self):
    ...

class SoLineHighlightRenderAction(SoGLRenderAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, viewportregion):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def apply(self, node):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  def setVisible(self, visible):
    ...

  def isVisible(self):
    ...

  def setColor(self, color):
    ...

  def getColor(self):
    ...

  def setLinePattern(self, pattern):
    ...

  def getLinePattern(self):
    ...

  def setLineWidth(self, width):
    ...

  def getLineWidth(self):
    ...

class SbLazyPimplPtr:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, initial):
    ...

  @overload
  def __init__(self, copy):
    ...

  @overload
  def __init__(self):
    ...

  def set(self, value):
    ...

  def get(self):
    ...

class SbBox3f:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, xmin, ymin, zmin, xmax, ymax, zmax):
    ...

  @overload
  def __init__(self, minpoint, maxpoint):
    ...

  @overload
  def __init__(self, box):
    ...

  @overload
  def __init__(self, box):
    ...

  @overload
  def __init__(self, box):
    ...

  @overload
  def setBounds(self, xmin, ymin, zmin, xmax, ymax, zmax):
    ...

  @overload
  def setBounds(self, minpoint, maxpoint):
    ...

  @overload
  def setBounds(self, box):
    ...

  @overload
  def setBounds(self, box):
    ...

  @overload
  def setBounds(self, box):
    ...

  @overload
  def getBounds(self, xmin, ymin, zmin, xmax, ymax, zmax):
    ...

  @overload
  def getBounds(self, minpoint, maxpoint):
    ...

  @overload
  def getMin(self):
    ...

  @overload
  def getMin(self):
    ...

  @overload
  def getMax(self):
    ...

  @overload
  def getMax(self):
    ...

  @overload
  def extendBy(self, pt):
    ...

  @overload
  def extendBy(self, box):
    ...

  def transform(self, matrix):
    ...

  def makeEmpty(self):
    ...

  def isEmpty(self):
    ...

  def hasVolume(self):
    ...

  def getVolume(self):
    ...

  @overload
  def intersect(self, pt):
    ...

  @overload
  def intersect(self, box):
    ...

  def getClosestPoint(self, point):
    ...

  def outside(self, mvp, cullbits):
    ...

  def getCenter(self):
    ...

  def getOrigin(self, originX, originY, originZ):
    ...

  @overload
  def getSize(self, sizeX, sizeY, sizeZ):
    ...

  @overload
  def getSize(self):
    ...

  def getSpan(self, dir, dmin, dmax):
    ...

  def print(self, file):
    ...

class SbMatrix:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44):
    ...

  @overload
  def __init__(self, matrix):
    ...

  @overload
  def __init__(self, matrix):
    ...

  @overload
  def __init__(self, matrix):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def setValue(self, m):
    ...

  @overload
  def setValue(self, m):
    ...

  @overload
  def setValue(self, pMat):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, m):
    ...

  def makeIdentity(self):
    ...

  def setRotate(self, q):
    ...

  def inverse(self):
    ...

  @overload
  def det3(self, r1, r2, r3, c1, c2, c3):
    ...

  @overload
  def det3(self):
    ...

  def det4(self):
    ...

  def equals(self, m, tolerance):
    ...

  @staticmethod
  def identity():
    ...

  @overload
  def setScale(self, s):
    ...

  @overload
  def setScale(self, s):
    ...

  def setTranslate(self, t):
    ...

  @overload
  def setTransform(self, t, r, s):
    ...

  @overload
  def setTransform(self, t, r, s, so):
    ...

  @overload
  def setTransform(self, translation, rotation, scaleFactor, scaleOrientation, center):
    ...

  @overload
  def getTransform(self, t, r, s, so):
    ...

  @overload
  def getTransform(self, translation, rotation, scaleFactor, scaleOrientation, center):
    ...

  def factor(self, r, s, u, t, proj):
    ...

  def LUDecomposition(self, index, d):
    ...

  def LUBackSubstitution(self, index, b):
    ...

  def transpose(self):
    ...

  def multRight(self, m):
    ...

  def multLeft(self, m):
    ...

  def multMatrixVec(self, src, dst):
    ...

  @overload
  def multVecMatrix(self, src, dst):
    ...

  @overload
  def multVecMatrix(self, src, dst):
    ...

  def multDirMatrix(self, src, dst):
    ...

  def multLineMatrix(self, src, dst):
    ...

  def print(self, fp):
    ...

class SbXfBox3f(SbBox3f):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, boxmin, boxmax):
    ...

  @overload
  def __init__(self, box):
    ...

  @overload
  def __init__(self):
    ...

  def setTransform(self, m):
    ...

  def getTransform(self):
    ...

  def getInverse(self):
    ...

  def getCenter(self):
    ...

  @overload
  def extendBy(self, pt):
    ...

  @overload
  def extendBy(self, bb):
    ...

  @overload
  def extendBy(self, bb):
    ...

  @overload
  def intersect(self, pt):
    ...

  @overload
  def intersect(self, bb):
    ...

  @overload
  def intersect(self, bb):
    ...

  def getSpan(self, direction, dMin, dMax):
    ...

  def project(self):
    ...

  def transform(self, m):
    ...

  def getVolume(self):
    ...

  def print(self, file):
    ...

class SoGetBoundingBoxAction(SoAction):
  # ResetType
  TRANSFORM: "SoSFEnum" = ...
  BBOX: "SoSFEnum" = ...
  ALL: "SoSFEnum" = ...
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, vp):
    ...

  @overload
  def __init__(self):
    ...

  def setViewportRegion(self, newregion):
    ...

  def getViewportRegion(self):
    ...

  def getBoundingBox(self):
    ...

  def getXfBoundingBox(self):
    ...

  def getCenter(self):
    ...

  def setInCameraSpace(self, flag):
    ...

  def isInCameraSpace(self):
    ...

  def setResetPath(self, path, resetbefore, what):
    ...

  def getResetPath(self):
    ...

  def isResetPath(self):
    ...

  def isResetBefore(self):
    ...

  def getWhatReset(self):
    ...

  def checkResetBefore(self):
    ...

  def checkResetAfter(self):
    ...

  @overload
  def extendBy(self, box):
    ...

  @overload
  def extendBy(self, box):
    ...

  def setCenter(self, center, transformcenter):
    ...

  def isCenterSet(self):
    ...

  def resetCenter(self):
    ...

class SbVec4f:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z, w):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z, w):
    ...

  def equals(self, v, tolerance):
    ...

  def dot(self, v):
    ...

  def getReal(self, v):
    ...

  def length(self):
    ...

  def sqrLength(self):
    ...

  def negate(self):
    ...

  def normalize(self):
    ...

  def print(self, fp):
    ...

class SbRotation:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, axis, radians):
    ...

  @overload
  def __init__(self, q):
    ...

  @overload
  def __init__(self, q0, q1, q2, q3):
    ...

  @overload
  def __init__(self, m):
    ...

  @overload
  def __init__(self, rotateFrom, rotateTo):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, q0, q1, q2, q3):
    ...

  @overload
  def getValue(self, axis, radians):
    ...

  @overload
  def getValue(self, matrix):
    ...

  @overload
  def setValue(self, q0, q1, q2, q3):
    ...

  @overload
  def setValue(self, q):
    ...

  @overload
  def setValue(self, m):
    ...

  @overload
  def setValue(self, axis, radians):
    ...

  @overload
  def setValue(self, rotateFrom, rotateTo):
    ...

  def invert(self):
    ...

  def inverse(self):
    ...

  def equals(self, r, tolerance):
    ...

  def multVec(self, src, dst):
    ...

  def scaleAngle(self, scaleFactor):
    ...

  @staticmethod
  def slerp(rot0, rot1, t):
    ...

  @staticmethod
  def identity():
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SoGetMatrixAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, region):
    ...

  @overload
  def __init__(self):
    ...

  def setViewportRegion(self, region):
    ...

  def getViewportRegion(self):
    ...

  def getMatrix(self):
    ...

  def getInverse(self):
    ...

  def getTextureMatrix(self):
    ...

  def getTextureInverse(self):
    ...

class SoGetPrimitiveCountAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, vp):
    ...

  @overload
  def __init__(self):
    ...

  def getTriangleCount(self):
    ...

  def getLineCount(self):
    ...

  def getPointCount(self):
    ...

  def getTextCount(self):
    ...

  def getImageCount(self):
    ...

  def containsNoPrimitives(self):
    ...

  def containsNonTriangleShapes(self):
    ...

  def is3DTextCountedAsTriangles(self):
    ...

  def setCount3DTextAsTriangles(self, flag):
    ...

  def canApproximateCount(self):
    ...

  def setCanApproximate(self, flag):
    ...

  def setDecimationValue(self, type, percentage):
    ...

  def getDecimationType(self):
    ...

  def getDecimationPercentage(self):
    ...

  def addNumTriangles(self, num):
    ...

  def addNumLines(self, num):
    ...

  def addNumPoints(self, num):
    ...

  def addNumText(self, num):
    ...

  def addNumImage(self, num):
    ...

  def incNumTriangles(self):
    ...

  def incNumLines(self):
    ...

  def incNumPoints(self):
    ...

  def incNumText(self):
    ...

  def incNumImage(self):
    ...

class SoHandleEventAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, viewportregion):
    ...

  @overload
  def __init__(self):
    ...

  def setViewportRegion(self, newregion):
    ...

  def getViewportRegion(self):
    ...

  def setEvent(self, ev):
    ...

  def getEvent(self):
    ...

  def setHandled(self):
    ...

  def isHandled(self):
    ...

  def setGrabber(self, node):
    ...

  def releaseGrabber(self):
    ...

  def getGrabber(self):
    ...

  def setPickRoot(self, node):
    ...

  def getPickRoot(self):
    ...

  def setPickRadius(self, radiusinpixels):
    ...

  def getPickRadius(self):
    ...

  def getPickedPoint(self):
    ...

  def getPickedPointList(self):
    ...

class SoPickAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  def setViewportRegion(self, newregion):
    ...

  def getViewportRegion(self):
    ...

  def enableCulling(self, flag):
    ...

  def isCullingEnabled(self):
    ...

class SoRayPickAction(SoPickAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @overload
  def __init__(self, viewportregion):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def setPoint(self, viewportPoint):
    ...

  def setNormalizedPoint(self, normpoint):
    ...

  def setRadius(self, radiusinpixels):
    ...

  def getRadius(self):
    ...

  def setRay(self, start, direction, neardistance, fardistance):
    ...

  def setPickAll(self, flag):
    ...

  def isPickAll(self):
    ...

  def getPickedPointList(self):
    ...

  def getPickedPoint(self, index):
    ...

  def computeWorldSpaceRay(self):
    ...

  def hasWorldSpaceRay(self):
    ...

  @overload
  def setObjectSpace(self):
    ...

  @overload
  def setObjectSpace(self, matrix):
    ...

  @overload
  def intersect(self, v0, v1, v2, intersection, barycentric, front):
    ...

  @overload
  def intersect(self, v0, v1, intersection):
    ...

  @overload
  def intersect(self, point):
    ...

  @overload
  def intersect(self, box, usefullviewvolume):
    ...

  @overload
  def intersect(self, box, intersection, usefullviewvolume):
    ...

  def getViewVolume(self):
    ...

  def getLine(self):
    ...

  def isBetweenPlanes(self, intersection):
    ...

  def addIntersection(self, objectspacepoint, frontpick):
    ...

  def reset(self):
    ...

class SoSearchAction(SoAction):
  # LookFor
  NODE: "SoSFEnum" = ...
  TYPE: "SoSFEnum" = ...
  NAME: "SoSFEnum" = ...
  # Interest
  FIRST: "SoSFEnum" = ...
  LAST: "SoSFEnum" = ...
  ALL: "SoSFEnum" = ...
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def setNode(self, node):
    ...

  def getNode(self):
    ...

  def setType(self, type, chkderived):
    ...

  def getType(self, chkderived):
    ...

  def setName(self, name):
    ...

  def getName(self):
    ...

  def setFind(self, what):
    ...

  def getFind(self):
    ...

  def setInterest(self, interest):
    ...

  def getInterest(self):
    ...

  def setSearchingAll(self, searchall):
    ...

  def isSearchingAll(self):
    ...

  def getPath(self):
    ...

  def getPaths(self):
    ...

  def reset(self):
    ...

  def setFound(self):
    ...

  def isFound(self):
    ...

  def addPath(self, path):
    ...

class SoSimplifyAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def apply(self, root):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

class SoReorganizeAction(SoSimplifyAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self, simplifier):
    ...

  @overload
  def __init__(self):
    ...

  def getSimplifiedSceneGraph(self):
    ...

  def generateNormals(self, onoff):
    ...

  def areNormalGenerated(self):
    ...

  def generateTriangleStrips(self, onoff):
    ...

  def areTriangleStripGenerated(self):
    ...

  def generateTexCoords(self, onoff):
    ...

  def areTexCoordsGenerated(self):
    ...

  def generateVPNodes(self, onoff):
    ...

  def areVPNodesGenerated(self):
    ...

  def matchIndexArrays(self, onoff):
    ...

  def areIndexArraysMatched(self):
    ...

  def getSimplifier(self):
    ...

  @overload
  def apply(self, root):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  @staticmethod
  def startReport(msg):
    ...

  @staticmethod
  def finishReport():
    ...

class SoWriteAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, out):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def getOutput(self):
    ...

  @overload
  def continueToApply(self, node):
    ...

  @overload
  def continueToApply(self, path):
    ...

class SoAudioRenderAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def callDoAction(action, node):
    ...

  @staticmethod
  def callAudioRender(action, node):
    ...

class SoIntersectingPrimitive:
  # PrimitiveType
  SEGMENT: "SoSFEnum" = ...
  LINE_SEGMENT: "SoSFEnum" = ...
  TRIANGLE: "SoSFEnum" = ...
  path: SoPath = ...
  type: PrimitiveType = ...
  vertex: SbVec3f = ...
  xf_vertex: SbVec3f = ...
class SoIntersectionDetectionAction(SoAction):
  # Resp
  NEXT_PRIMITIVE: "SoSFEnum" = ...
  NEXT_SHAPE: "SoSFEnum" = ...
  ABORT: "SoSFEnum" = ...
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def setIntersectionDetectionEpsilon(self, epsilon):
    ...

  def getIntersectionDetectionEpsilon(self):
    ...

  @staticmethod
  def setIntersectionEpsilon(epsilon):
    ...

  @staticmethod
  def getIntersectionEpsilon():
    ...

  def setTypeEnabled(self, type, enable):
    ...

  def isTypeEnabled(self, type, checkgroups):
    ...

  def setManipsEnabled(self, enable):
    ...

  def isManipsEnabled(self):
    ...

  def setDraggersEnabled(self, enable):
    ...

  def isDraggersEnabled(self):
    ...

  def setShapeInternalsEnabled(self, enable):
    ...

  def isShapeInternalsEnabled(self):
    ...

  def addVisitationCallback(self, type, cb, closure):
    ...

  def removeVisitationCallback(self, type, cb, closure):
    ...

  @overload
  def apply(self, node):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, paths, obeysRules):
    ...

  def setFilterCallback(self, cb, closure):
    ...

  def addIntersectionCallback(self, cb, closure):
    ...

  def removeIntersectionCallback(self, cb, closure):
    ...

class SoToVRMLAction(SoAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def apply(self, node):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  def getVRMLSceneGraph(self):
    ...

  def expandSoFile(self, flag):
    ...

  def areSoFileExpanded(self):
    ...

  def setUrlName(self, name):
    ...

  def getUrlName(self):
    ...

  def writeTexCoords(self, flag):
    ...

  def areTexCoordWritten(self):
    ...

  def expandTexture2Node(self, flag):
    ...

  def areTexture2NodeExpanded(self):
    ...

  def keepUnknownNodes(self, flag):
    ...

  def areUnknownNodeKept(self):
    ...

  def convertInlineNodes(self, flag):
    ...

  def doConvertInlineNodes(self):
    ...

  def conditionalConversion(self, flag):
    ...

  def doConditionalConversion(self):
    ...

  def setVerbosity(self, flag):
    ...

  def isVerbose(self):
    ...

class SoToVRML2Action(SoToVRMLAction):
  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def addMethod(type, method):
    ...

  @staticmethod
  def enableElement(type, stackindex):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def apply(self, node):
    ...

  @overload
  def apply(self, path):
    ...

  @overload
  def apply(self, pathlist, obeysrules):
    ...

  def getVRML2SceneGraph(self):
    ...

  def reuseAppearanceNodes(self, appearance):
    ...

  def doReuseAppearanceNodes(self):
    ...

  def reusePropertyNodes(self, property):
    ...

  def doReusePropertyNodes(self):
    ...

  def reuseGeometryNodes(self, geometry):
    ...

  def doReuseGeometryNodes(self):
    ...

class SoCacheElement(SoElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def pop(self, state, prevTopElement):
    ...

  @staticmethod
  def set(state, cache):
    ...

  def getCache(self):
    ...

  @staticmethod
  def anyOpen(state):
    ...

  @staticmethod
  def invalidate(state):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  def getNextCacheElement(self):
    ...

  @staticmethod
  def addElement(state, element):
    ...

  @staticmethod
  def addCacheDependency(state, cache):
    ...

  @staticmethod
  def setInvalid(newvalue):
    ...

  @staticmethod
  def getCurrentCache(state):
    ...

class SoChildList(SoNodeList):
  @overload
  def __init__(self, parent):
    ...

  @overload
  def __init__(self, parent, size):
    ...

  @overload
  def __init__(self, parent, cl):
    ...

  @overload
  def __init__(self):
    ...

  def append(self, node):
    ...

  def insert(self, ptr, addbefore):
    ...

  def remove(self, index):
    ...

  def truncate(self, length):
    ...

  def copy(self, cl):
    ...

  def set(self, index, node):
    ...

  def traverseInPath(self, action, numindices, indices):
    ...

  @overload
  def traverse(self, action):
    ...

  @overload
  def traverse(self, action, index):
    ...

  @overload
  def traverse(self, action, node):
    ...

  @overload
  def traverse(self, action, first, last):
    ...

  def addPathAuditor(self, path):
    ...

  def removePathAuditor(self, path):
    ...

class SoProto(SoNode):
  def __init__(self, externproto):
    ...

  @staticmethod
  def setFetchExternProtoCallback(cb, closure):
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def findProto(name):
    ...

  @staticmethod
  def initClass():
    ...

  def createProtoInstance(self):
    ...

  def addISReference(self, container, fieldname, interfacename):
    ...

  def findISReference(self, container, fieldname):
    ...

  def addReference(self, name, base):
    ...

  def removeReference(self, name):
    ...

  def findReference(self, name):
    ...

  def addRoute(self, fromnode, fromfield, tonode, tofield):
    ...

  def getProtoName(self):
    ...

  def readInstance(self, input, flags):
    ...

  def write(self, action):
    ...

class SoProtoInstance(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self, proto, deffielddata):
    ...

  @staticmethod
  def findProtoInstance(rootnode):
    ...

  def setRootNode(self, root):
    ...

  def getRootNode(self):
    ...

  def getProtoDefinition(self):
    ...

  def getProtoName(self):
    ...

  def write(self, action):
    ...

class SbVec3d:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, p0, p1, p2):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, barycentric, v0, v1, v2):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z):
    ...

  def cross(self, v):
    ...

  def dot(self, v):
    ...

  def equals(self, v, tolerance):
    ...

  def getClosestAxis(self):
    ...

  def length(self):
    ...

  def sqrLength(self):
    ...

  def negate(self):
    ...

  def normalize(self):
    ...

  def toString(self):
    ...

  def fromString(self, str):
    ...

  def print(self, fp):
    ...

class SbDPViewVolume:
  # ProjectionType
  ORTHOGRAPHIC: "SoSFEnum" = ...
  PERSPECTIVE: "SoSFEnum" = ...
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def getMatrices(self, affine, proj):
    ...

  def getMatrix(self):
    ...

  def getCameraSpaceMatrix(self):
    ...

  @overload
  def projectPointToLine(self, pt, line):
    ...

  @overload
  def projectPointToLine(self, pt, line0, line1):
    ...

  def projectToScreen(self, src, dst):
    ...

  def getPlane(self, distFromEye):
    ...

  def getSightPoint(self, distFromEye):
    ...

  def getPlanePoint(self, distFromEye, normPoint):
    ...

  def getAlignRotation(self, rightAngleOnly):
    ...

  def getWorldToScreenScale(self, worldCenter, normRadius):
    ...

  def projectBox(self, box):
    ...

  @overload
  def narrow(self, left, bottom, right, top):
    ...

  @overload
  def narrow(self, box):
    ...

  def ortho(self, left, right, bottom, top, nearval, farval):
    ...

  def perspective(self, fovy, aspect, nearval, farval):
    ...

  def frustum(self, left, right, bottom, top, nearval, farval):
    ...

  def rotateCamera(self, q):
    ...

  def translateCamera(self, v):
    ...

  def zVector(self):
    ...

  def zNarrow(self, nearval, farval):
    ...

  def scale(self, factor):
    ...

  def scaleWidth(self, ratio):
    ...

  def scaleHeight(self, ratio):
    ...

  def getProjectionType(self):
    ...

  def getProjectionPoint(self):
    ...

  def getProjectionDirection(self):
    ...

  def getNearDist(self):
    ...

  def getWidth(self):
    ...

  def getHeight(self):
    ...

  def getDepth(self):
    ...

  def print(self, fp):
    ...

  def getViewVolumePlanes(self, planes):
    ...

  def transform(self, matrix):
    ...

  def getViewUp(self):
    ...

  def copyValues(self, vv):
    ...

class SbViewVolume:
  # ProjectionType
  ORTHOGRAPHIC: "SoSFEnum" = ...
  PERSPECTIVE: "SoSFEnum" = ...
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  def getMatrices(self, affine, proj):
    ...

  def getMatrix(self):
    ...

  def getCameraSpaceMatrix(self):
    ...

  @overload
  def projectPointToLine(self, pt, line):
    ...

  @overload
  def projectPointToLine(self, pt, line0, line1):
    ...

  def projectToScreen(self, src, dst):
    ...

  def getPlane(self, distFromEye):
    ...

  def getSightPoint(self, distFromEye):
    ...

  def getPlanePoint(self, distFromEye, normPoint):
    ...

  def getAlignRotation(self, rightAngleOnly):
    ...

  def getWorldToScreenScale(self, worldCenter, normRadius):
    ...

  def projectBox(self, box):
    ...

  @overload
  def narrow(self, left, bottom, right, top):
    ...

  @overload
  def narrow(self, box):
    ...

  def ortho(self, left, right, bottom, top, nearval, farval):
    ...

  def perspective(self, fovy, aspect, nearval, farval):
    ...

  def frustum(self, left, right, bottom, top, nearval, farval):
    ...

  def rotateCamera(self, q):
    ...

  def translateCamera(self, v):
    ...

  def zVector(self):
    ...

  def zNarrow(self, nearval, farval):
    ...

  def scale(self, factor):
    ...

  def scaleWidth(self, ratio):
    ...

  def scaleHeight(self, ratio):
    ...

  def getProjectionType(self):
    ...

  def getProjectionPoint(self):
    ...

  def getProjectionDirection(self):
    ...

  def getNearDist(self):
    ...

  def getWidth(self):
    ...

  def getHeight(self):
    ...

  def getDepth(self):
    ...

  def print(self, fp):
    ...

  def getViewVolumePlanes(self, planes):
    ...

  def transform(self, matrix):
    ...

  def getViewUp(self):
    ...

  @overload
  def intersect(self, p):
    ...

  @overload
  def intersect(self, p0, p1, closestpoint):
    ...

  @overload
  def intersect(self, box):
    ...

  def intersectionBox(self, box):
    ...

  def outsideTest(self, p, bmin, bmax):
    ...

  def getDPViewVolume(self):
    ...

  type: ProjectionType = ...
  projPoint: SbVec3f = ...
  projDir: SbVec3f = ...
  nearDist: float = ...
  nearToFar: float = ...
  llf: SbVec3f = ...
  lrf: SbVec3f = ...
  ulf: SbVec3f = ...
class SoSFRotation(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, axis, angle):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, q0, q1, q2, q3):
    ...

  @overload
  def setValue(self, q):
    ...

  @overload
  def setValue(self, axis, angle):
    ...

  @staticmethod
  def initClass():
    ...

class SoSFVec3f(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, xyz):
    ...

  @staticmethod
  def initClass():
    ...

class SoCamera(SoNode):
  # ViewportMapping
  CROP_VIEWPORT_FILL_FRAME: "SoSFEnum" = ...
  CROP_VIEWPORT_LINE_FRAME: "SoSFEnum" = ...
  CROP_VIEWPORT_NO_FRAME: "SoSFEnum" = ...
  ADJUST_CAMERA: "SoSFEnum" = ...
  LEAVE_ALONE: "SoSFEnum" = ...
  # StereoMode
  MONOSCOPIC: "SoSFEnum" = ...
  LEFT_VIEW: "SoSFEnum" = ...
  RIGHT_VIEW: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def getViewVolume(self, vp, resultvp, mm):
    ...

  @overload
  def getViewVolume(self, useaspectratio):
    ...

  @overload
  def pointAt(self, targetpoint):
    ...

  @overload
  def pointAt(self, targetpoint, upvector):
    ...

  def scaleHeight(self, scalefactor):
    ...

  @overload
  def viewAll(self, sceneroot, vpregion, slack):
    ...

  @overload
  def viewAll(self, path, vpregion, slack):
    ...

  def getViewportBounds(self, region):
    ...

  def setStereoMode(self, mode):
    ...

  def getStereoMode(self):
    ...

  def setStereoAdjustment(self, adjustment):
    ...

  def getStereoAdjustment(self):
    ...

  def setBalanceAdjustment(self, adjustment):
    ...

  def getBalanceAdjustment(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def audioRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def viewBoundingBox(self, box, aspect, slack):
    ...

  viewportMapping: SoSFEnum = ...
  position: SoSFVec3f = ...
  orientation: SoSFRotation = ...
  aspectRatio: SoSFFloat = ...
  nearDistance: SoSFFloat = ...
  farDistance: SoSFFloat = ...
  focalDistance: SoSFFloat = ...
class SoPerspectiveCamera(SoCamera):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def scaleHeight(self, scalefactor):
    ...

  def getViewVolume(self, useaspectratio):
    ...

  def viewBoundingBox(self, box, aspect, slack):
    ...

  heightAngle: SoSFFloat = ...
class SoReversePerspectiveCamera(SoPerspectiveCamera):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

class SoOrthographicCamera(SoCamera):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def scaleHeight(self, scalefactor):
    ...

  def getViewVolume(self, useaspectratio):
    ...

  def viewBoundingBox(self, box, aspect, slack):
    ...

  height: SoSFFloat = ...
class SoFrustumCamera(SoCamera):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def scaleHeight(self, scalefactor):
    ...

  def getViewVolume(self, useaspectratio):
    ...

  left: SoSFFloat = ...
  right: SoSFFloat = ...
  top: SoSFFloat = ...
  bottom: SoSFFloat = ...
class SoMultiTextureCoordinateElement(SoElement):
  # CoordType
  NONE: "SoSFEnum" = ...
  TEXGEN: "SoSFEnum" = ...
  EXPLICIT: "SoSFEnum" = ...
  FUNCTION: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @staticmethod
  def setDefault(state, node, unit):
    ...

  @overload
  @staticmethod
  def setFunction(state, node, unit, func, userdata):
    ...

  @overload
  @staticmethod
  def setFunction(state, node, func, userdata):
    ...

  @overload
  @staticmethod
  def set2(state, node, unit, numCoords, coords):
    ...

  @overload
  @staticmethod
  def set2(state, node, numCoords, coords):
    ...

  @overload
  @staticmethod
  def set3(state, node, unit, numCoords, coords):
    ...

  @overload
  @staticmethod
  def set3(state, node, numCoords, coords):
    ...

  @overload
  @staticmethod
  def set4(state, node, unit, numCoords, coords):
    ...

  @overload
  @staticmethod
  def set4(state, node, numCoords, coords):
    ...

  @overload
  @staticmethod
  def getType(state, unit):
    ...

  @overload
  def getType(self, unit):
    ...

  @staticmethod
  def getInstance(state):
    ...

  @overload
  def get(self, unit, point, normal):
    ...

  @overload
  def get(self, point, normal):
    ...

  def getNum(self, unit):
    ...

  def is2D(self, unit):
    ...

  def getDimension(self, unit):
    ...

  @overload
  def get2(self, unit, index):
    ...

  @overload
  def get2(self, index):
    ...

  @overload
  def get3(self, unit, index):
    ...

  @overload
  def get3(self, index):
    ...

  @overload
  def get4(self, unit, index):
    ...

  @overload
  def get4(self, index):
    ...

  def getArrayPtr2(self, unit):
    ...

  def getArrayPtr3(self, unit):
    ...

  def getArrayPtr4(self, unit):
    ...

  def push(self, state):
    ...

  def matches(self, elem):
    ...

  def copyMatchInfo(self):
    ...

class SoShape(SoNode):
  # TriangleShape
  TRIANGLE_STRIP: "SoSFEnum" = ...
  TRIANGLE_FAN: "SoSFEnum" = ...
  TRIANGLES: "SoSFEnum" = ...
  POLYGON: "SoSFEnum" = ...
  QUADS: "SoSFEnum" = ...
  QUAD_STRIP: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  LINES: "SoSFEnum" = ...
  LINE_STRIP: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def affectsState(self):
    ...

  def notify(self, nl):
    ...

  def getBoundingBox(self, action):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def callback(self, action):
    ...

  def computeBBox(self, action, box, center):
    ...

  def getPrimitiveCount(self, action):
    ...

  @staticmethod
  def getScreenSize(state, boundingbox, rectsize):
    ...

  @staticmethod
  def getDecimatedComplexity(state, complexity):
    ...

  def getBoundingBoxCache(self):
    ...

class SoMFString(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, strings):
    ...

  def set1Value(self, idx, value):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, string):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @staticmethod
  def initClass():
    ...

  def deleteText(self, fromline, fromchar, toline, tochar):
    ...

class SoMFFloat(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  def set1Value(self, idx, value):
    ...

  def setValue(self, value):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoAsciiText(SoShape):
  # Justification
  LEFT: "SoSFEnum" = ...
  RIGHT: "SoSFEnum" = ...
  CENTER: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  string: SoMFString = ...
  spacing: SoSFFloat = ...
  justification: SoSFEnum = ...
  width: SoMFFloat = ...
class SoSFBitMask(SoSFEnum):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  @staticmethod
  def initClass():
    ...

class SoCone(SoShape):
  # Part
  SIDES: "SoSFEnum" = ...
  BOTTOM: "SoSFEnum" = ...
  ALL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def addPart(self, part):
    ...

  def removePart(self, part):
    ...

  def hasPart(self, part):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  parts: SoSFBitMask = ...
  bottomRadius: SoSFFloat = ...
  height: SoSFFloat = ...
class SoCube(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  width: SoSFFloat = ...
  height: SoSFFloat = ...
  depth: SoSFFloat = ...
class SoCylinder(SoShape):
  # Part
  SIDES: "SoSFEnum" = ...
  TOP: "SoSFEnum" = ...
  BOTTOM: "SoSFEnum" = ...
  ALL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def addPart(self, part):
    ...

  def removePart(self, part):
    ...

  def hasPart(self, part):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def GLRender(self, action):
    ...

  radius: SoSFFloat = ...
  height: SoSFFloat = ...
  parts: SoSFBitMask = ...
class SoSFNode(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

  def fixCopy(self, copyconnections):
    ...

  def referencesCopy(self):
    ...

class SoMFUInt32(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  def set1Value(self, idx, value):
    ...

  def setValue(self, value):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFVec3f(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xyz):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y, z):
    ...

  @overload
  def set1Value(self, idx, xyz):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, xyz):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFVec2f(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xy):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y):
    ...

  @overload
  def set1Value(self, idx, xy):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, xy):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFInt32(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  def set1Value(self, idx, value):
    ...

  def setValue(self, value):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoVertexProperty(SoNode):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_PART: "SoSFEnum" = ...
  PER_PART_INDEXED: "SoSFEnum" = ...
  PER_FACE: "SoSFEnum" = ...
  PER_FACE_INDEXED: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  vertex: SoMFVec3f = ...
  texCoord: SoMFVec2f = ...
  texCoord3: SoMFVec3f = ...
  normal: SoMFVec3f = ...
  normalBinding: SoSFEnum = ...
  orderedRGBA: SoMFUInt32 = ...
  materialBinding: SoSFEnum = ...
  textureUnit: SoMFInt32 = ...
class SoVertexShape(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def notify(self, nl):
    ...

  @overload
  def generateDefaultNormals(self, state, bundle):
    ...

  @overload
  def generateDefaultNormals(self, state, cache):
    ...

  def write(self, action):
    ...

  vertexProperty: SoSFNode = ...
class SoNonIndexedShape(SoVertexShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  startIndex: SoSFInt32 = ...
class SoFaceSet(SoNonIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def generateDefaultNormals(self, state, nb):
    ...

  def getPrimitiveCount(self, action):
    ...

  numVertices: SoMFInt32 = ...
class SoLineSet(SoNonIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  numVertices: SoMFInt32 = ...
class SoPointSet(SoNonIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  numPoints: SoSFInt32 = ...
class SoMarkerSet(SoPointSet):
  # MarkerType
  NONE: "SoSFEnum" = ...
  CROSS_5_5: "SoSFEnum" = ...
  PLUS_5_5: "SoSFEnum" = ...
  MINUS_5_5: "SoSFEnum" = ...
  SLASH_5_5: "SoSFEnum" = ...
  BACKSLASH_5_5: "SoSFEnum" = ...
  BAR_5_5: "SoSFEnum" = ...
  STAR_5_5: "SoSFEnum" = ...
  Y_5_5: "SoSFEnum" = ...
  LIGHTNING_5_5: "SoSFEnum" = ...
  WELL_5_5: "SoSFEnum" = ...
  CIRCLE_LINE_5_5: "SoSFEnum" = ...
  SQUARE_LINE_5_5: "SoSFEnum" = ...
  DIAMOND_LINE_5_5: "SoSFEnum" = ...
  TRIANGLE_LINE_5_5: "SoSFEnum" = ...
  RHOMBUS_LINE_5_5: "SoSFEnum" = ...
  HOURGLASS_LINE_5_5: "SoSFEnum" = ...
  SATELLITE_LINE_5_5: "SoSFEnum" = ...
  PINE_TREE_LINE_5_5: "SoSFEnum" = ...
  CAUTION_LINE_5_5: "SoSFEnum" = ...
  SHIP_LINE_5_5: "SoSFEnum" = ...
  CIRCLE_FILLED_5_5: "SoSFEnum" = ...
  SQUARE_FILLED_5_5: "SoSFEnum" = ...
  DIAMOND_FILLED_5_5: "SoSFEnum" = ...
  TRIANGLE_FILLED_5_5: "SoSFEnum" = ...
  RHOMBUS_FILLED_5_5: "SoSFEnum" = ...
  HOURGLASS_FILLED_5_5: "SoSFEnum" = ...
  SATELLITE_FILLED_5_5: "SoSFEnum" = ...
  PINE_TREE_FILLED_5_5: "SoSFEnum" = ...
  CAUTION_FILLED_5_5: "SoSFEnum" = ...
  SHIP_FILLED_5_5: "SoSFEnum" = ...
  CROSS_7_7: "SoSFEnum" = ...
  PLUS_7_7: "SoSFEnum" = ...
  MINUS_7_7: "SoSFEnum" = ...
  SLASH_7_7: "SoSFEnum" = ...
  BACKSLASH_7_7: "SoSFEnum" = ...
  BAR_7_7: "SoSFEnum" = ...
  STAR_7_7: "SoSFEnum" = ...
  Y_7_7: "SoSFEnum" = ...
  LIGHTNING_7_7: "SoSFEnum" = ...
  WELL_7_7: "SoSFEnum" = ...
  CIRCLE_LINE_7_7: "SoSFEnum" = ...
  SQUARE_LINE_7_7: "SoSFEnum" = ...
  DIAMOND_LINE_7_7: "SoSFEnum" = ...
  TRIANGLE_LINE_7_7: "SoSFEnum" = ...
  RHOMBUS_LINE_7_7: "SoSFEnum" = ...
  HOURGLASS_LINE_7_7: "SoSFEnum" = ...
  SATELLITE_LINE_7_7: "SoSFEnum" = ...
  PINE_TREE_LINE_7_7: "SoSFEnum" = ...
  CAUTION_LINE_7_7: "SoSFEnum" = ...
  SHIP_LINE_7_7: "SoSFEnum" = ...
  CIRCLE_FILLED_7_7: "SoSFEnum" = ...
  SQUARE_FILLED_7_7: "SoSFEnum" = ...
  DIAMOND_FILLED_7_7: "SoSFEnum" = ...
  TRIANGLE_FILLED_7_7: "SoSFEnum" = ...
  RHOMBUS_FILLED_7_7: "SoSFEnum" = ...
  HOURGLASS_FILLED_7_7: "SoSFEnum" = ...
  SATELLITE_FILLED_7_7: "SoSFEnum" = ...
  PINE_TREE_FILLED_7_7: "SoSFEnum" = ...
  CAUTION_FILLED_7_7: "SoSFEnum" = ...
  SHIP_FILLED_7_7: "SoSFEnum" = ...
  CROSS_9_9: "SoSFEnum" = ...
  PLUS_9_9: "SoSFEnum" = ...
  MINUS_9_9: "SoSFEnum" = ...
  SLASH_9_9: "SoSFEnum" = ...
  BACKSLASH_9_9: "SoSFEnum" = ...
  BAR_9_9: "SoSFEnum" = ...
  STAR_9_9: "SoSFEnum" = ...
  Y_9_9: "SoSFEnum" = ...
  LIGHTNING_9_9: "SoSFEnum" = ...
  WELL_9_9: "SoSFEnum" = ...
  CIRCLE_LINE_9_9: "SoSFEnum" = ...
  SQUARE_LINE_9_9: "SoSFEnum" = ...
  DIAMOND_LINE_9_9: "SoSFEnum" = ...
  TRIANGLE_LINE_9_9: "SoSFEnum" = ...
  RHOMBUS_LINE_9_9: "SoSFEnum" = ...
  HOURGLASS_LINE_9_9: "SoSFEnum" = ...
  SATELLITE_LINE_9_9: "SoSFEnum" = ...
  PINE_TREE_LINE_9_9: "SoSFEnum" = ...
  CAUTION_LINE_9_9: "SoSFEnum" = ...
  SHIP_LINE_9_9: "SoSFEnum" = ...
  CIRCLE_FILLED_9_9: "SoSFEnum" = ...
  SQUARE_FILLED_9_9: "SoSFEnum" = ...
  DIAMOND_FILLED_9_9: "SoSFEnum" = ...
  TRIANGLE_FILLED_9_9: "SoSFEnum" = ...
  RHOMBUS_FILLED_9_9: "SoSFEnum" = ...
  HOURGLASS_FILLED_9_9: "SoSFEnum" = ...
  SATELLITE_FILLED_9_9: "SoSFEnum" = ...
  PINE_TREE_FILLED_9_9: "SoSFEnum" = ...
  CAUTION_FILLED_9_9: "SoSFEnum" = ...
  SHIP_FILLED_9_9: "SoSFEnum" = ...
  NUM_MARKERS: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  @staticmethod
  def getNumDefinedMarkers():
    ...

  @staticmethod
  def addMarker(idx, size, bytes, isLSBFirst, isUpToDown):
    ...

  @staticmethod
  def getMarker(idx, size, bytes, isLSBFirst):
    ...

  @staticmethod
  def removeMarker(idx):
    ...

  @staticmethod
  def isMarkerBitSet(idx, bitNumber):
    ...

  markerIndex: SoMFInt32 = ...
class SoQuadMesh(SoNonIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def generateDefaultNormals(self, state, nb):
    ...

  verticesPerColumn: SoSFInt32 = ...
  verticesPerRow: SoSFInt32 = ...
class SoTriangleStripSet(SoNonIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def generateDefaultNormals(self, state, nb):
    ...

  numVertices: SoMFInt32 = ...
class SoIndexedShape(SoVertexShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  coordIndex: SoMFInt32 = ...
  materialIndex: SoMFInt32 = ...
  normalIndex: SoMFInt32 = ...
  textureCoordIndex: SoMFInt32 = ...
class SoIndexedFaceSet(SoIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  @overload
  def generateDefaultNormals(self, state, bundle):
    ...

  @overload
  def generateDefaultNormals(self, state, cache):
    ...

class SoIndexedLineSet(SoIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

class SoIndexedPointSet(SoIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def notify(self, list):
    ...

class SoIndexedMarkerSet(SoIndexedPointSet):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  markerIndex: SoMFInt32 = ...
class SoIndexedTriangleStripSet(SoIndexedShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def generateDefaultNormals(self, state, nb):
    ...

class SoImage(SoShape):
  # VertAlignment
  BOTTOM: "SoSFEnum" = ...
  HALF: "SoSFEnum" = ...
  TOP: "SoSFEnum" = ...
  # HorAlignment
  LEFT: "SoSFEnum" = ...
  CENTER: "SoSFEnum" = ...
  RIGHT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  width: SoSFInt32 = ...
  height: SoSFInt32 = ...
  vertAlignment: SoSFEnum = ...
  horAlignment: SoSFEnum = ...
  image: SoSFImage = ...
  filename: SoSFString = ...
class SoIndexedNurbsCurve(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def sendPrimitive(self, SoAction_, SoPrimitiveVertex_):
    ...

  numControlPoints: SoSFInt32 = ...
  coordIndex: SoMFInt32 = ...
  knotVector: SoMFFloat = ...
class SoIndexedNurbsSurface(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def sendPrimitive(self, SoAction_, SoPrimitiveVertex_):
    ...

  numUControlPoints: SoSFInt32 = ...
  numVControlPoints: SoSFInt32 = ...
  coordIndex: SoMFInt32 = ...
  uKnotVector: SoMFFloat = ...
  vKnotVector: SoMFFloat = ...
  numSControlPoints: SoSFInt32 = ...
  numTControlPoints: SoSFInt32 = ...
  textureCoordIndex: SoMFInt32 = ...
  sKnotVector: SoMFFloat = ...
  tKnotVector: SoMFFloat = ...
class SoNurbsCurve(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def sendPrimitive(self, SoAction_, SoPrimitiveVertex_):
    ...

  numControlPoints: SoSFInt32 = ...
  knotVector: SoMFFloat = ...
class SoNurbsSurface(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def sendPrimitive(self, SoAction_, SoPrimitiveVertex_):
    ...

  numUControlPoints: SoSFInt32 = ...
  numVControlPoints: SoSFInt32 = ...
  numSControlPoints: SoSFInt32 = ...
  numTControlPoints: SoSFInt32 = ...
  uKnotVector: SoMFFloat = ...
  vKnotVector: SoMFFloat = ...
  sKnotVector: SoMFFloat = ...
  tKnotVector: SoMFFloat = ...
class SoSphere(SoShape):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  radius: SoSFFloat = ...
class SoText2(SoShape):
  # Justification
  LEFT: "SoSFEnum" = ...
  RIGHT: "SoSFEnum" = ...
  CENTER: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  string: SoMFString = ...
  spacing: SoSFFloat = ...
  justification: SoSFEnum = ...
class SoText3(SoShape):
  # Part
  FRONT: "SoSFEnum" = ...
  SIDES: "SoSFEnum" = ...
  BACK: "SoSFEnum" = ...
  ALL: "SoSFEnum" = ...
  # Justification
  LEFT: "SoSFEnum" = ...
  RIGHT: "SoSFEnum" = ...
  CENTER: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getCharacterBounds(self, state, stringindex, charindex):
    ...

  def GLRender(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  string: SoMFString = ...
  spacing: SoSFFloat = ...
  justification: SoSFEnum = ...
  parts: SoSFBitMask = ...
class SoGroup(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, nchildren):
    ...

  def addChild(self, node):
    ...

  def insertChild(self, child, newchildindex):
    ...

  def getChild(self, index):
    ...

  def findChild(self, node):
    ...

  def getNumChildren(self):
    ...

  @overload
  def removeChild(self, childindex):
    ...

  @overload
  def removeChild(self, child):
    ...

  def removeAllChildren(self):
    ...

  @overload
  def replaceChild(self, index, newchild):
    ...

  @overload
  def replaceChild(self, oldchild, newchild):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def pick(self, action):
    ...

  def search(self, action):
    ...

  def write(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  def getChildren(self):
    ...

  def addWriteReference(self, out, isfromfield):
    ...

class SoSeparator(SoGroup):
  # CacheEnabled
  OFF: "SoSFEnum" = ...
  ON: "SoSFEnum" = ...
  AUTO: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, nchildren):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  def GLRenderInPath(self, action):
    ...

  def GLRenderOffPath(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def rayPick(self, action):
    ...

  def search(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  def notify(self, nl):
    ...

  @staticmethod
  def setNumRenderCaches(howmany):
    ...

  @staticmethod
  def getNumRenderCaches():
    ...

  def affectsState(self):
    ...

  renderCaching: SoSFEnum = ...
  boundingBoxCaching: SoSFEnum = ...
  renderCulling: SoSFEnum = ...
  pickCulling: SoSFEnum = ...
class SoAnnotation(SoSeparator):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  def GLRenderInPath(self, action):
    ...

  def GLRenderOffPath(self, action):
    ...

class SoSelection(SoSeparator):
  # Policy
  SINGLE: "SoSFEnum" = ...
  TOGGLE: "SoSFEnum" = ...
  SHIFT: "SoSFEnum" = ...
  DISABLE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, nChildren):
    ...

  @overload
  def select(self, path):
    ...

  @overload
  def select(self, node):
    ...

  @overload
  def deselect(self, path):
    ...

  @overload
  def deselect(self, which):
    ...

  @overload
  def deselect(self, node):
    ...

  @overload
  def toggle(self, path):
    ...

  @overload
  def toggle(self, node):
    ...

  @overload
  def isSelected(self, path):
    ...

  @overload
  def isSelected(self, node):
    ...

  def deselectAll(self):
    ...

  def getNumSelected(self):
    ...

  def getList(self):
    ...

  def getPath(self, index):
    ...

  def addSelectionCallback(self, f, userData):
    ...

  def removeSelectionCallback(self, f, userData):
    ...

  def addDeselectionCallback(self, f, userData):
    ...

  def removeDeselectionCallback(self, f, userData):
    ...

  def addStartCallback(self, f, userData):
    ...

  def removeStartCallback(self, f, userData):
    ...

  def addFinishCallback(self, f, userData):
    ...

  def removeFinishCallback(self, f, userData):
    ...

  def setPickFilterCallback(self, f, userData, callOnlyIfSelectable):
    ...

  def setPickMatching(self, pickMatching):
    ...

  def isPickMatching(self):
    ...

  def getPickMatching(self):
    ...

  def addChangeCallback(self, f, userData):
    ...

  def removeChangeCallback(self, f, userData):
    ...

  policy: SoSFEnum = ...
class SoExtSelection(SoSelection):
  # LassoType
  NOLASSO: "SoSFEnum" = ...
  LASSO: "SoSFEnum" = ...
  RECTANGLE: "SoSFEnum" = ...
  # LassoPolicy
  FULL_BBOX: "SoSFEnum" = ...
  PART_BBOX: "SoSFEnum" = ...
  FULL: "SoSFEnum" = ...
  PART: "SoSFEnum" = ...
  # LassoMode
  ALL_SHAPES: "SoSFEnum" = ...
  VISIBLE_SHAPES: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def useOverlay(self, overlay):
    ...

  def isUsingOverlay(self):
    ...

  def getOverlaySceneGraph(self):
    ...

  def setOverlayLassoColorIndex(self, index):
    ...

  def getOverlayLassoColorIndex(self):
    ...

  def setLassoColor(self, color):
    ...

  def getLassoColor(self):
    ...

  def setLassoWidth(self, width):
    ...

  def getLassoWidth(self):
    ...

  def setOverlayLassoPattern(self, pattern):
    ...

  def getOverlayLassoPattern(self):
    ...

  def animateOverlayLasso(self, animate):
    ...

  def isOverlayLassoAnimated(self):
    ...

  def handleEvent(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  @overload
  def select(self, root, numcoords, lasso, vp, shiftpolicy):
    ...

  @overload
  def select(self, root, numcoords, lasso, vp, shiftkeypolicy):
    ...

  def getLassoCoordsDC(self, numCoords):
    ...

  def getLassoCoordsWC(self, numCoords):
    ...

  def getSelectionPathList(self):
    ...

  def setLassoFilterCallback(self, f, userdata, callonlyifselectable):
    ...

  def setTriangleFilterCallback(self, func, userdata):
    ...

  def setLineSegmentFilterCallback(self, func, userdata):
    ...

  def setPointFilterCallback(self, func, userdata):
    ...

  def wasShiftDown(self):
    ...

  lassoType: SoSFEnum = ...
  lassoPolicy: SoSFEnum = ...
  lassoMode: SoSFEnum = ...
class SoLocateHighlight(SoSeparator):
  # Modes
  AUTO: "SoSFEnum" = ...
  ON: "SoSFEnum" = ...
  OFF: "SoSFEnum" = ...
  # Styles
  EMISSIVE: "SoSFEnum" = ...
  EMISSIVE_DIFFUSE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def handleEvent(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  def GLRenderInPath(self, action):
    ...

  @staticmethod
  def turnOffCurrentHighlight(action):
    ...

  color: SoSFColor = ...
  style: SoSFEnum = ...
  mode: SoSFEnum = ...
class SoWWWAnchor(SoLocateHighlight):
  # Mapping
  NONE: "SoSFEnum" = ...
  POINT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def setFullURLName(self, url):
    ...

  def getFullURLName(self):
    ...

  def handleEvent(self, action):
    ...

  @staticmethod
  def setFetchURLCallBack(f, userData):
    ...

  @staticmethod
  def setHighlightURLCallBack(f, userData):
    ...

  name: SoSFString = ...
  description: SoSFString = ...
  map: SoSFEnum = ...
class SoSFShort(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoArray(SoGroup):
  # Origin
  FIRST: "SoSFEnum" = ...
  CENTER: "SoSFEnum" = ...
  LAST: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def affectsState(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def handleEvent(self, action):
    ...

  def getMatrix(self, action):
    ...

  def search(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  origin: SoSFEnum = ...
  numElements1: SoSFShort = ...
  numElements2: SoSFShort = ...
  numElements3: SoSFShort = ...
  separation1: SoSFVec3f = ...
  separation2: SoSFVec3f = ...
  separation3: SoSFVec3f = ...
class SoSwitch(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, numchildren):
    ...

  def affectsState(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def handleEvent(self, action):
    ...

  def getMatrix(self, action):
    ...

  def search(self, action):
    ...

  def write(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  def notify(self, nl):
    ...

  whichChild: SoSFInt32 = ...
class SoBlinker(SoSwitch):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getBoundingBox(self, action):
    ...

  def write(self, action):
    ...

  speed: SoSFFloat = ...
  on: SoSFBool = ...
class SoLOD(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, numchildren):
    ...

  @staticmethod
  def initClass():
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def GLRenderBelowPath(self, action):
    ...

  def GLRenderInPath(self, action):
    ...

  def GLRenderOffPath(self, action):
    ...

  def rayPick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  def notify(self, nl):
    ...

  range: SoMFFloat = ...
  center: SoSFVec3f = ...
class SoLevelOfDetail(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, numchildren):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def rayPick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def audioRender(self, action):
    ...

  def notify(self, nl):
    ...

  screenArea: SoMFFloat = ...
class SoMFMatrix(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  def set1Value(self, idx, value):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @staticmethod
  def initClass():
    ...

class SoMultipleCopy(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def affectsState(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def handleEvent(self, action):
    ...

  def getMatrix(self, action):
    ...

  def search(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  matrix: SoMFMatrix = ...
class SoSFPath(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

  def notify(self, l):
    ...

  def fixCopy(self, copyconnections):
    ...

  def referencesCopy(self):
    ...

class SoPathSwitch(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, numchildren):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def handleEvent(self, action):
    ...

  def getMatrix(self, action):
    ...

  def search(self, action):
    ...

  def callback(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  path: SoSFPath = ...
class SoTransformSeparator(SoGroup):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, nChildren):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

class SoAntiSquish(SoTransformation):
  # Sizing
  X: "SoSFEnum" = ...
  Y: "SoSFEnum" = ...
  Z: "SoSFEnum" = ...
  AVERAGE_DIMENSION: "SoSFEnum" = ...
  BIGGEST_DIMENSION: "SoSFEnum" = ...
  SMALLEST_DIMENSION: "SoSFEnum" = ...
  LONGEST_DIAGONAL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def recalc(self):
    ...

  def doAction(self, action):
    ...

  sizing: SoSFEnum = ...
  recalcAlways: SoSFBool = ...
class SoSFMatrix(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44):
    ...

  @staticmethod
  def initClass():
    ...

class SoMatrixTransform(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  matrix: SoSFMatrix = ...
class SoRotation(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  rotation: SoSFRotation = ...
class SoPendulum(SoRotation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def write(self, action):
    ...

  rotation0: SoSFRotation = ...
  rotation1: SoSFRotation = ...
  speed: SoSFFloat = ...
  on: SoSFBool = ...
class SbTime:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, sec):
    ...

  @overload
  def __init__(self, sec, usec):
    ...

  @overload
  def __init__(self, tv):
    ...

  @staticmethod
  def getTimeOfDay():
    ...

  def setToTimeOfDay(self):
    ...

  @staticmethod
  def zero():
    ...

  @staticmethod
  def max():
    ...

  @staticmethod
  def maxTime():
    ...

  @staticmethod
  def sleep(msec):
    ...

  @overload
  def setValue(self, sec):
    ...

  @overload
  def setValue(self, sec, usec):
    ...

  @overload
  def setValue(self, tv):
    ...

  def setMsecValue(self, msec):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, sec, usec):
    ...

  @overload
  def getValue(self, tv):
    ...

  def getMsecValue(self):
    ...

  def format(self, fmt):
    ...

  def formatDate(self, fmt):
    ...

  def parsedate(self, date):
    ...

  def print(self, fp):
    ...

class SoRotor(SoRotation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  speed: SoSFFloat = ...
  on: SoSFBool = ...
class SoResetTransform(SoTransformation):
  # ResetType
  TRANSFORM: "SoSFEnum" = ...
  BBOX: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  whatToReset: SoSFBitMask = ...
class SoRotationXYZ(SoTransformation):
  # Axis
  X: "SoSFEnum" = ...
  Y: "SoSFEnum" = ...
  Z: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getRotation(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  axis: SoSFEnum = ...
  angle: SoSFFloat = ...
class SoScale(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  scaleFactor: SoSFVec3f = ...
class SoTranslation(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  translation: SoSFVec3f = ...
class SoShuttle(SoTranslation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def write(self, action):
    ...

  translation0: SoSFVec3f = ...
  translation1: SoSFVec3f = ...
  speed: SoSFFloat = ...
  on: SoSFBool = ...
class SoSurroundScale(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def invalidate(self):
    ...

  def doAction(self, action):
    ...

  def setDoingTranslations(self, val):
    ...

  def isDoingTranslations(self):
    ...

  numNodesUpToContainer: SoSFInt32 = ...
  numNodesUpToReset: SoSFInt32 = ...
class SoTransform(SoTransformation):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def pointAt(self, frompoint, topoint):
    ...

  def getScaleSpaceMatrix(self, mat, inv):
    ...

  def getRotationSpaceMatrix(self, mat, inv):
    ...

  def getTranslationSpaceMatrix(self, mat, inv):
    ...

  def multLeft(self, mat):
    ...

  def multRight(self, mat):
    ...

  def combineLeft(self, nodeonright):
    ...

  def combineRight(self, nodeonleft):
    ...

  def setMatrix(self, mat):
    ...

  def recenter(self, newcenter):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  translation: SoSFVec3f = ...
  rotation: SoSFRotation = ...
  scaleFactor: SoSFVec3f = ...
  scaleOrientation: SoSFRotation = ...
  center: SoSFVec3f = ...
class SoMFColor(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, rgb):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, vec):
    ...

  @overload
  def set1Value(self, idx, r, g, b):
    ...

  @overload
  def set1Value(self, idx, rgb):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, vec):
    ...

  @overload
  def setValue(self, r, g, b):
    ...

  @overload
  def setValue(self, rgb):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

  def setHSVValues(self, start, num, hsv):
    ...

  @overload
  def setHSVValue(self, h, s, v):
    ...

  @overload
  def setHSVValue(self, hsv):
    ...

  @overload
  def set1HSVValue(self, idx, h, s, v):
    ...

  @overload
  def set1HSVValue(self, idx, hsv):
    ...

class SoBaseColor(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  rgb: SoMFColor = ...
class SoCallback(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def setCallback(self, function, userdata):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def pick(self, action):
    ...

  def search(self, action):
    ...

  def write(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

class SbPlane:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, normal, D):
    ...

  @overload
  def __init__(self, p0, p1, p2):
    ...

  @overload
  def __init__(self, normal, point):
    ...

  def offset(self, d):
    ...

  @overload
  def intersect(self, l, intersection):
    ...

  @overload
  def intersect(self, pl, line):
    ...

  def transform(self, matrix):
    ...

  def isInHalfSpace(self, point):
    ...

  def getDistance(self, point):
    ...

  def getNormal(self):
    ...

  def getDistanceFromOrigin(self):
    ...

  def print(self, file):
    ...

class SoSFPlane(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  def setValue(self, newvalue):
    ...

  @staticmethod
  def initClass():
    ...

class SoClipPlane(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  plane: SoSFPlane = ...
  on: SoSFBool = ...
class SoColorIndex(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  index: SoMFInt32 = ...
class SoCoordinate3(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  point: SoMFVec3f = ...
class SoMFVec4f(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xyzw):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y, z, w):
    ...

  @overload
  def set1Value(self, idx, xyzw):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, xyzw):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoCoordinate4(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  point: SoMFVec4f = ...
class SoLight(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def callback(self, action):
    ...

  on: SoSFBool = ...
  intensity: SoSFFloat = ...
  color: SoSFColor = ...
class SoDirectionalLight(SoLight):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  direction: SoSFVec3f = ...
class SoSpotLight(SoLight):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  location: SoSFVec3f = ...
  direction: SoSFVec3f = ...
  dropOffRate: SoSFFloat = ...
  cutOffAngle: SoSFFloat = ...
class SoPointLight(SoLight):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  location: SoSFVec3f = ...
class SoEnvironmentElement(SoReplacedElement):
  # FogType
  NONE: "SoSFEnum" = ...
  HAZE: "SoSFEnum" = ...
  FOG: "SoSFEnum" = ...
  SMOKE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @staticmethod
  def set(state, node, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart):
    ...

  @staticmethod
  def get(state, ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogStart):
    ...

  @staticmethod
  def getAmbientIntensity(state):
    ...

  @staticmethod
  def getFogVisibility(state):
    ...

  @staticmethod
  def getLightAttenuation(state):
    ...

  @staticmethod
  def getAmbientColor(state):
    ...

  @staticmethod
  def getFogColor(state):
    ...

  @staticmethod
  def getFogType(state):
    ...

  @staticmethod
  def getDefault(ambientIntensity, ambientColor, attenuation, fogType, fogColor, fogVisibility, fogNear):
    ...

  def print(self, file):
    ...

class SoEnvironment(SoNode):
  # FogType
  NONE: "SoSFEnum" = ...
  HAZE: "SoSFEnum" = ...
  FOG: "SoSFEnum" = ...
  SMOKE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  ambientIntensity: SoSFFloat = ...
  ambientColor: SoSFColor = ...
  attenuation: SoSFVec3f = ...
  fogType: SoSFEnum = ...
  fogColor: SoSFColor = ...
  fogVisibility: SoSFFloat = ...
class SoEventCallback(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def setPath(self, path):
    ...

  def getPath(self):
    ...

  def addEventCallback(self, eventtype, f, userdata):
    ...

  def removeEventCallback(self, eventtype, f, userdata):
    ...

  def getAction(self):
    ...

  def getEvent(self):
    ...

  def getPickedPoint(self):
    ...

  def setHandled(self):
    ...

  def isHandled(self):
    ...

  def grabEvents(self):
    ...

  def releaseEvents(self):
    ...

class SoFile(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  def search(self, action):
    ...

  def copyChildren(self):
    ...

  def getChildren(self):
    ...

  def copyContents(self, from_, copyconnections):
    ...

  def getFullName(self):
    ...

  @staticmethod
  def setSearchOK(dosearch):
    ...

  @staticmethod
  def getSearchOK():
    ...

  name: SoSFString = ...
class SoSFName(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, name):
    ...

  @staticmethod
  def initClass():
    ...

class SoFont(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  name: SoSFName = ...
  size: SoSFFloat = ...
class SoFontStyle(SoFont):
  # Family
  SERIF: "SoSFEnum" = ...
  SANS: "SoSFEnum" = ...
  TYPEWRITER: "SoSFEnum" = ...
  # Style
  NONE: "SoSFEnum" = ...
  BOLD: "SoSFEnum" = ...
  ITALIC: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getFontName(self):
    ...

  def doAction(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  family: SoSFEnum = ...
  style: SoSFBitMask = ...
class SoInfo(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  string: SoSFString = ...
class SoLabel(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  label: SoSFName = ...
class SoAccumulatedElement(SoElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def initClass():
    ...

  def matches(self, element):
    ...

class SoProfileElement(SoAccumulatedElement):
  # Profile
  START_FIRST: "SoSFEnum" = ...
  START_NEW: "SoSFEnum" = ...
  ADD_TO_CURRENT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  @staticmethod
  def add(state, profile):
    ...

  @staticmethod
  def get(state):
    ...

class SoProfile(SoNode):
  # Profile
  START_FIRST: "SoSFEnum" = ...
  START_NEW: "SoSFEnum" = ...
  ADD_TO_CURRENT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
    ...

  def getVertices(self, state, numvertices, vertices):
    ...

  index: SoMFInt32 = ...
  linkage: SoSFEnum = ...
class SoLinearProfile(SoProfile):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
    ...

  def getVertices(self, state, numvertices, vertices):
    ...

class SoNurbsProfile(SoProfile):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def getTrimCurve(self, state, numpoints, points, floatspervec, numknots, knotvector):
    ...

  def getVertices(self, state, numvertices, vertices):
    ...

  knotVector: SoMFFloat = ...
class SoMaterial(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  ambientColor: SoMFColor = ...
  diffuseColor: SoMFColor = ...
  specularColor: SoMFColor = ...
  emissiveColor: SoMFColor = ...
  shininess: SoMFFloat = ...
  transparency: SoMFFloat = ...
class SoVertexAttributeElement(SoAccumulatedElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  @staticmethod
  def add(state, attribdata):
    ...

  @staticmethod
  def getInstance(state):
    ...

  def getNumAttributes(self):
    ...

  def applyToAttributes(self, func, closure):
    ...

class SoVertexAttribute(SoNode):
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def getValuesField(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def write(self, action):
    ...

  def copyContents(self, from_, copyconnections):
    ...

  def notify(self, l):
    ...

  name: SoSFName = ...
  typeName: SoSFName = ...
class SoAnyVertexAttribute(SoVertexAttribute):
  ...
class SoVertexAttributeBindingElement(SoInt32Element):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @overload
  @staticmethod
  def set(state, node, binding):
    ...

  @overload
  @staticmethod
  def set(state, binding):
    ...

  @staticmethod
  def get(state):
    ...

  @staticmethod
  def getDefault():
    ...

class SoVertexAttributeBinding(SoNode):
  # Binding
  OVERALL: "SoSFEnum" = ...
  PER_VERTEX: "SoSFEnum" = ...
  PER_VERTEX_INDEXED: "SoSFEnum" = ...
  DEFAULT: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  value: SoSFEnum = ...
class SoNormal(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  vector: SoMFVec3f = ...
class SoPackedColor(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def isTransparent(self):
    ...

  orderedRGBA: SoMFUInt32 = ...
class SoPolygonOffsetElement(SoReplacedElement):
  # Style
  FILLED: "SoSFEnum" = ...
  LINES: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @staticmethod
  def set(state, node, factor, units, styles, on):
    ...

  @staticmethod
  def get(state, factor, units, styles, on):
    ...

  @staticmethod
  def getDefault(factor, units, styles, on):
    ...

class SoPolygonOffset(SoNode):
  # Style
  FILLED: "SoSFEnum" = ...
  LINES: "SoSFEnum" = ...
  POINTS: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  factor: SoSFFloat = ...
  units: SoSFFloat = ...
  styles: SoSFBitMask = ...
  on: SoSFBool = ...
class SoProfileCoordinate2(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  point: SoMFVec2f = ...
class SoProfileCoordinate3(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  point: SoMFVec3f = ...
class SoSFImage3(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  @staticmethod
  def initClass():
    ...

  def getValue(self, size, nc):
    ...

  def setValue(self, size, nc, bytes):
    ...

  def startEditing(self, size, nc):
    ...

  def finishEditing(self):
    ...

class SoTexture3(SoTexture):
  # Model
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  filenames: SoMFString = ...
  images: SoSFImage3 = ...
  wrapR: SoSFEnum = ...
  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
  model: SoSFEnum = ...
  blendColor: SoSFColor = ...
  enableCompressedTexture: SoSFBool = ...
class SoSFVec2f(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, xy):
    ...

  @staticmethod
  def initClass():
    ...

class SoTexture2Transform(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  translation: SoSFVec2f = ...
  rotation: SoSFFloat = ...
  scaleFactor: SoSFVec2f = ...
  center: SoSFVec2f = ...
class SoTexture3Transform(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  translation: SoSFVec3f = ...
  rotation: SoSFRotation = ...
  scaleFactor: SoSFVec3f = ...
  scaleOrientation: SoSFRotation = ...
  center: SoSFVec3f = ...
class SoTextureCoordinate2(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  point: SoMFVec2f = ...
class SoTextureCoordinate3(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  point: SoMFVec3f = ...
class SoTextureCoordinateFunction(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

class SoTextureCoordinateDefault(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

class SoTextureCoordinateEnvironment(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def callback(self, action):
    ...

class SoTextureCoordinatePlane(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def callback(self, action):
    ...

  directionS: SoSFVec3f = ...
  directionT: SoSFVec3f = ...
  directionR: SoSFVec3f = ...
class SoTextureMatrixTransform(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  matrix: SoSFMatrix = ...
class SoWWWInline(SoNode):
  # BboxVisibility
  NEVER: "SoSFEnum" = ...
  UNTIL_LOADED: "SoSFEnum" = ...
  ALWAYS: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def setFullURLName(self, url):
    ...

  def getFullURLName(self):
    ...

  def copyChildren(self):
    ...

  def requestURLData(self):
    ...

  def isURLDataRequested(self):
    ...

  def isURLDataHere(self):
    ...

  def cancelURLDataRequest(self):
    ...

  def setChildData(self, urldata):
    ...

  def getChildData(self):
    ...

  def getChildren(self):
    ...

  @staticmethod
  def setFetchURLCallBack(f, userdata):
    ...

  @staticmethod
  def setBoundingBoxVisibility(b):
    ...

  @staticmethod
  def getBoundingBoxVisibility():
    ...

  @staticmethod
  def setBoundingBoxColor(c):
    ...

  @staticmethod
  def getBoundingBoxColor():
    ...

  @staticmethod
  def setReadAsSoFile(onoff):
    ...

  @staticmethod
  def getReadAsSoFile():
    ...

  def doAction(self, action):
    ...

  def doActionOnKidsOrBox(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  def handleEvent(self, action):
    ...

  def search(self, action):
    ...

  def pick(self, action):
    ...

  def getPrimitiveCount(self, action):
    ...

  def audioRender(self, action):
    ...

  name: SoSFString = ...
  bboxCenter: SoSFVec3f = ...
  bboxSize: SoSFVec3f = ...
  alternateRep: SoSFNode = ...
class SoTransparencyType(SoNode):
  # Type
  SCREEN_DOOR: "SoSFEnum" = ...
  ADD: "SoSFEnum" = ...
  DELAYED_ADD: "SoSFEnum" = ...
  SORTED_OBJECT_ADD: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  DELAYED_BLEND: "SoSFEnum" = ...
  SORTED_OBJECT_BLEND: "SoSFEnum" = ...
  SORTED_OBJECT_SORTED_TRIANGLE_ADD: "SoSFEnum" = ...
  SORTED_OBJECT_SORTED_TRIANGLE_BLEND: "SoSFEnum" = ...
  NONE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  value: SoSFEnum = ...
class SoListener(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  position: SoSFVec3f = ...
  orientation: SoSFRotation = ...
  gain: SoSFFloat = ...
  dopplerVelocity: SoSFVec3f = ...
  dopplerFactor: SoSFFloat = ...
class SoTextureCoordinateCube(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

class SoTextureCoordinateSphere(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

class SoTextureCoordinateCylinder(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

class SoTextureCubeMap(SoTexture):
  # Model
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  REPLACE: "SoSFEnum" = ...
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def rayPick(self, action):
    ...

  @staticmethod
  def readImage(fname, w, h, nc, bytes):
    ...

  filenames: SoMFString = ...
  imagePosX: SoSFImage = ...
  imageNegX: SoSFImage = ...
  imagePosY: SoSFImage = ...
  imageNegY: SoSFImage = ...
  imagePosZ: SoSFImage = ...
  imageNegZ: SoSFImage = ...
  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
  model: SoSFEnum = ...
  blendColor: SoSFColor = ...
class SoMFNode(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  def set1Value(self, idx, value):
    ...

  def setValue(self, value):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @staticmethod
  def initClass():
    ...

  def fixCopy(self, copyconnections):
    ...

  def referencesCopy(self):
    ...

  def addNode(self, node):
    ...

  def insertNode(self, node, idx):
    ...

  def getNode(self, idx):
    ...

  def findNode(self, node):
    ...

  def getNumNodes(self):
    ...

  @overload
  def removeNode(self, index):
    ...

  @overload
  def removeNode(self, node):
    ...

  def removeAllNodes(self):
    ...

  @overload
  def replaceNode(self, idx, newnode):
    ...

  @overload
  def replaceNode(self, oldnode, newnode):
    ...

  def deleteValues(self, start, num):
    ...

  def insertSpace(self, start, num):
    ...

class SoShaderObject(SoNode):
  # SourceType
  ARB_PROGRAM: "SoSFEnum" = ...
  CG_PROGRAM: "SoSFEnum" = ...
  GLSL_PROGRAM: "SoSFEnum" = ...
  FILENAME: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def GLRender(self, action):
    ...

  def search(self, action):
    ...

  def updateParameters(self, state):
    ...

  def getSourceType(self):
    ...

  def getSourceProgram(self):
    ...

  isActive: SoSFBool = ...
  sourceType: SoSFEnum = ...
  sourceProgram: SoSFString = ...
  parameter: SoMFNode = ...
class SoSFVec4f(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, xyzw):
    ...

  @staticmethod
  def initClass():
    ...

class SbVec2i32:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y):
    ...

  def dot(self, v):
    ...

  def negate(self):
    ...

  def print(self, fp):
    ...

class SoSFVec2i32(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, xy):
    ...

  @staticmethod
  def initClass():
    ...

class SbVec3i32:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z):
    ...

  def dot(self, v):
    ...

  def negate(self):
    ...

class SoSFVec3i32(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, xyz):
    ...

  @staticmethod
  def initClass():
    ...

class SbVec4i32:
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, x, y, z, w):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def setValue(self, v):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, x, y, z, w):
    ...

  def dot(self, v):
    ...

  def negate(self):
    ...

class SoSFVec4i32(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, xyzw):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFVec2i32(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xy):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y):
    ...

  @overload
  def set1Value(self, idx, xy):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, xy):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFVec3i32(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xyz):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y, z):
    ...

  @overload
  def set1Value(self, idx, xyz):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y, z):
    ...

  @overload
  def setValue(self, xyz):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoMFVec4i32(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  @overload
  def setValues(self, start, num, newvals):
    ...

  @overload
  def setValues(self, start, num, xyzw):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, x, y, z, w):
    ...

  @overload
  def set1Value(self, idx, xyzw):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, x, y, z, w):
    ...

  @overload
  def setValue(self, xyzw):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @overload
  def setValuesPointer(self, num, userdata):
    ...

  @staticmethod
  def initClass():
    ...

class SoShaderParameter(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  name: SoSFString = ...
  identifier: SoSFInt32 = ...
class SoUniformShaderParameter(SoShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

class SoShaderParameter1f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFFloat = ...
class SoShaderParameter1i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFInt32 = ...
class SoShaderParameter2f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec2f = ...
class SoShaderParameter2i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec2i32 = ...
class SoShaderParameter3f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec3f = ...
class SoShaderParameter3i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec3i32 = ...
class SoShaderParameter4f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec4f = ...
class SoShaderParameter4i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFVec4i32 = ...
class SoShaderParameterArray1f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFFloat = ...
class SoShaderParameterArray1i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFInt32 = ...
class SoShaderParameterArray2f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec2f = ...
class SoShaderParameterArray2i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec2i32 = ...
class SoShaderParameterArray3f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec3f = ...
class SoShaderParameterArray3i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec3i32 = ...
class SoShaderParameterArray4f(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec4f = ...
class SoShaderParameterArray4i(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFVec4i32 = ...
class SoShaderParameterMatrix(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoSFMatrix = ...
class SoShaderParameterMatrixArray(SoUniformShaderParameter):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  value: SoMFMatrix = ...
class SoShaderStateMatrixParameter(SoUniformShaderParameter):
  # MatrixType
  MODELVIEW: "SoSFEnum" = ...
  PROJECTION: "SoSFEnum" = ...
  TEXTURE: "SoSFEnum" = ...
  MODELVIEW_PROJECTION: "SoSFEnum" = ...
  # MatrixTransform
  IDENTITY: "SoSFEnum" = ...
  TRANSPOSE: "SoSFEnum" = ...
  INVERSE: "SoSFEnum" = ...
  INVERSE_TRANSPOSE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def initClass():
    ...

  def updateParameter(self, shaderObject):
    ...

  def updateValue(self, state):
    ...

  matrixType: SoSFEnum = ...
  matrixTransform: SoSFEnum = ...
class SoShaderProgram(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def __init__(self):
    ...

  def setEnableCallback(self, cb, closure):
    ...

  def GLRender(self, action):
    ...

  def search(self, action):
    ...

  @staticmethod
  def initClass():
    ...

  shaderObject: SoMFNode = ...
class SoFragmentShader(SoShaderObject):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def isSupported(sourceType):
    ...

class SoVertexShader(SoShaderObject):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def isSupported(sourceType):
    ...

class SoTextureCoordinateNormalMap(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def callback(self, action):
    ...

class SoTextureCoordinateReflectionMap(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def callback(self, action):
    ...

class SoTextureCoordinateObject(SoTextureCoordinateFunction):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def callback(self, action):
    ...

  factorS: SoSFVec4f = ...
  factorT: SoSFVec4f = ...
  factorR: SoSFVec4f = ...
  factorQ: SoSFVec4f = ...
class SoTextureScalePolicy(SoNode):
  # Policy
  USE_TEXTURE_QUALITY: "SoSFEnum" = ...
  SCALE_DOWN: "SoSFEnum" = ...
  SCALE_UP: "SoSFEnum" = ...
  FRACTURE: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  policy: SoSFEnum = ...
  quality: SoSFFloat = ...
class SoTextureUnit(SoNode):
  # MappingMethod
  BUMP_MAPPING: "SoSFEnum" = ...
  IMAGE_MAPPING: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def getMatrix(self, action):
    ...

  @staticmethod
  def getMaxTextureUnit():
    ...

  unit: SoSFInt32 = ...
  mappingMethod: SoSFEnum = ...
class SoMFEnum(SoMField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValues(self, start):
    ...

  def find(self, value, addifnotfound):
    ...

  def setValues(self, start, num, newvals):
    ...

  @overload
  def set1Value(self, idx, value):
    ...

  @overload
  def set1Value(self, idx, name):
    ...

  @overload
  def setValue(self, value):
    ...

  @overload
  def setValue(self, name):
    ...

  def startEditing(self):
    ...

  def finishEditing(self):
    ...

  @staticmethod
  def initClass():
    ...

  def setEnums(self, num, values, names):
    ...

  def getNumEnums(self):
    ...

  def getEnum(self, idx, name):
    ...

class SbColor4f(SbVec4f):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self, rgb, alpha):
    ...

  @overload
  def __init__(self, v):
    ...

  @overload
  def __init__(self, rgba):
    ...

  @overload
  def __init__(self, r, g, b, a):
    ...

  @overload
  def setValue(self, r, g, b, a):
    ...

  @overload
  def setValue(self, col):
    ...

  @overload
  def getValue(self):
    ...

  @overload
  def getValue(self, r, g, b, a):
    ...

  def setRGB(self, col):
    ...

  def getRGB(self, color):
    ...

  @overload
  def setHSVValue(self, h, s, v, a):
    ...

  @overload
  def setHSVValue(self, hsv, alpha):
    ...

  @overload
  def getHSVValue(self, h, s, v):
    ...

  @overload
  def getHSVValue(self, hsv):
    ...

  def setPackedValue(self, rgba):
    ...

  def getPackedValue(self):
    ...

class SoTextureCombineElement(SoElement):
  # Source
  PRIMARY_COLOR: "SoSFEnum" = ...
  TEXTURE: "SoSFEnum" = ...
  CONSTANT: "SoSFEnum" = ...
  PREVIOUS: "SoSFEnum" = ...
  # Operand
  SRC_COLOR: "SoSFEnum" = ...
  ONE_MINUS_SRC_COLOR: "SoSFEnum" = ...
  SRC_ALPHA: "SoSFEnum" = ...
  ONE_MINUS_SRC_ALPHA: "SoSFEnum" = ...
  # Operation
  REPLACE: "SoSFEnum" = ...
  MODULATE: "SoSFEnum" = ...
  ADD: "SoSFEnum" = ...
  ADD_SIGNED: "SoSFEnum" = ...
  SUBTRACT: "SoSFEnum" = ...
  INTERPOLATE: "SoSFEnum" = ...
  DOT3_RGB: "SoSFEnum" = ...
  DOT3_RGBA: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  @staticmethod
  def set(state, node, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
    ...

  @staticmethod
  def isDefault(state, unit):
    ...

  @staticmethod
  def get(state, unit, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
    ...

  def push(self, state):
    ...

  def matches(self, elem):
    ...

  def copyMatchInfo(self):
    ...

  def setElt(self, unit, nodeid, rgboperation, alphaoperation, rgbsource, alphasource, rgboperand, alphaoperand, constantcolor, rgbscale, alphascale):
    ...

  @staticmethod
  def apply(state, unit):
    ...

class SoTextureCombine(SoNode):
  # Source
  PRIMARY_COLOR: "SoSFEnum" = ...
  TEXTURE: "SoSFEnum" = ...
  CONSTANT: "SoSFEnum" = ...
  PREVIOUS: "SoSFEnum" = ...
  # Operand
  SRC_COLOR: "SoSFEnum" = ...
  ONE_MINUS_SRC_COLOR: "SoSFEnum" = ...
  SRC_ALPHA: "SoSFEnum" = ...
  ONE_MINUS_SRC_ALPHA: "SoSFEnum" = ...
  # Operation
  REPLACE: "SoSFEnum" = ...
  MODULATE: "SoSFEnum" = ...
  ADD: "SoSFEnum" = ...
  ADD_SIGNED: "SoSFEnum" = ...
  SUBTRACT: "SoSFEnum" = ...
  INTERPOLATE: "SoSFEnum" = ...
  DOT3_RGB: "SoSFEnum" = ...
  DOT3_RGBA: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def pick(self, action):
    ...

  rgbSource: SoMFEnum = ...
  alphaSource: SoMFEnum = ...
  rgbOperand: SoMFEnum = ...
  alphaOperand: SoMFEnum = ...
  rgbOperation: SoSFEnum = ...
  alphaOperation: SoSFEnum = ...
  rgbScale: SoSFFloat = ...
  alphaScale: SoSFFloat = ...
  constantColor: SoSFVec4f = ...
class SoBumpMap(SoNode):
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def rayPick(self, action):
    ...

  filename: SoSFString = ...
  image: SoSFImage = ...
  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
class SoBumpMapCoordinate(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def pick(self, action):
    ...

  point: SoMFVec2f = ...
class SoBumpMapTransform(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def callback(self, action):
    ...

  def GLRender(self, action):
    ...

  def getMatrix(self, action):
    ...

  def pick(self, action):
    ...

  translation: SoSFVec2f = ...
  rotation: SoSFFloat = ...
  scaleFactor: SoSFVec2f = ...
  center: SoSFVec2f = ...
class SoSFVec2s(SoSField):
  @overload
  def __init__(self):
    ...

  @overload
  def __init__(self):
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  def copyFrom(self, field):
    ...

  def isSame(self, field):
    ...

  def getValue(self):
    ...

  @overload
  def setValue(self, newvalue):
    ...

  @overload
  def setValue(self, x, y):
    ...

  @overload
  def setValue(self, xy):
    ...

  @staticmethod
  def initClass():
    ...

class SoSceneTexture2(SoNode):
  # Model
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  REPLACE: "SoSFEnum" = ...
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  CLAMP_TO_BORDER: "SoSFEnum" = ...
  # TransparencyFunction
  NONE: "SoSFEnum" = ...
  ALPHA_BLEND: "SoSFEnum" = ...
  ALPHA_TEST: "SoSFEnum" = ...
  # Type
  DEPTH: "SoSFEnum" = ...
  RGBA8: "SoSFEnum" = ...
  RGBA32F: "SoSFEnum" = ...
  RGB32F: "SoSFEnum" = ...
  RGBA16F: "SoSFEnum" = ...
  RGB16F: "SoSFEnum" = ...
  R3_G3_B2: "SoSFEnum" = ...
  RGB: "SoSFEnum" = ...
  RGB4: "SoSFEnum" = ...
  RGB5: "SoSFEnum" = ...
  RGB8: "SoSFEnum" = ...
  RGB10: "SoSFEnum" = ...
  RGB12: "SoSFEnum" = ...
  RGB16: "SoSFEnum" = ...
  RGBA: "SoSFEnum" = ...
  RGBA2: "SoSFEnum" = ...
  RGBA4: "SoSFEnum" = ...
  RGB5_A1: "SoSFEnum" = ...
  RGB10_A2: "SoSFEnum" = ...
  RGBA12: "SoSFEnum" = ...
  RGBA16: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def notify(self, list):
    ...

  def write(self, action):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def rayPick(self, action):
    ...

  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
  model: SoSFEnum = ...
  blendColor: SoSFColor = ...
  backgroundColor: SoSFVec4f = ...
  size: SoSFVec2s = ...
  scene: SoSFNode = ...
  sceneTransparencyType: SoSFNode = ...
  transparencyFunction: SoSFEnum = ...
  type: SoSFEnum = ...
class SoSceneTextureCubeMap(SoNode):
  # Model
  MODULATE: "SoSFEnum" = ...
  DECAL: "SoSFEnum" = ...
  BLEND: "SoSFEnum" = ...
  REPLACE: "SoSFEnum" = ...
  # Wrap
  REPEAT: "SoSFEnum" = ...
  CLAMP: "SoSFEnum" = ...
  # TransparencyFunction
  NONE: "SoSFEnum" = ...
  ALPHA_BLEND: "SoSFEnum" = ...
  ALPHA_TEST: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def rayPick(self, action):
    ...

  size: SoSFVec2s = ...
  scene: SoSFNode = ...
  wrapS: SoSFEnum = ...
  wrapT: SoSFEnum = ...
  wrapR: SoSFEnum = ...
  model: SoSFEnum = ...
  backgroundColor: SoSFColor = ...
  transparencyFunction: SoSFEnum = ...
  blendColor: SoSFColor = ...
class SoCacheHintElement(SoElement):
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def pop(self, state, prevtopelement):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

  @staticmethod
  def set(state, node, memvalue, gfxvalue):
    ...

  @staticmethod
  def get(state, memvalue, gfxvalue):
    ...

class SoCacheHint(SoNode):
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def doAction(self, action):
    ...

  def GLRender(self, action):
    ...

  def callback(self, action):
    ...

  def getBoundingBox(self, action):
    ...

  def pick(self, action):
    ...

  memValue: SoSFFloat = ...
  gfxValue: SoSFFloat = ...
class SoDepthBufferElement(SoElement):
  # DepthWriteFunction
  NEVER: "SoSFEnum" = ...
  ALWAYS: "SoSFEnum" = ...
  LESS: "SoSFEnum" = ...
  LEQUAL: "SoSFEnum" = ...
  EQUAL: "SoSFEnum" = ...
  GEQUAL: "SoSFEnum" = ...
  GREATER: "SoSFEnum" = ...
  NOTEQUAL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  @staticmethod
  def getClassStackIndex():
    ...

  @staticmethod
  def createInstance():
    ...

  @staticmethod
  def initClass():
    ...

  @staticmethod
  def set(state, test, write, function, range):
    ...

  @staticmethod
  def get(state, test_out, write_out, function_out, range_out):
    ...

  @staticmethod
  def getTestEnable(state):
    ...

  @staticmethod
  def getWriteEnable(state):
    ...

  @staticmethod
  def getFunction(state):
    ...

  @staticmethod
  def getRange(state):
    ...

  def init(self, state):
    ...

  def push(self, state):
    ...

  def pop(self, state, prevTopElement):
    ...

  def matches(self, element):
    ...

  def copyMatchInfo(self):
    ...

class SoDepthBuffer(SoNode):
  # DepthWriteFunction
  NEVER: "SoSFEnum" = ...
  ALWAYS: "SoSFEnum" = ...
  LESS: "SoSFEnum" = ...
  LEQUAL: "SoSFEnum" = ...
  EQUAL: "SoSFEnum" = ...
  GEQUAL: "SoSFEnum" = ...
  GREATER: "SoSFEnum" = ...
  NOTEQUAL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  test: SoSFBool = ...
  write: SoSFBool = ...
  function: SoSFEnum = ...
  range: SoSFVec2f = ...
class SoAlphaTest(SoNode):
  # Function
  NONE: "SoSFEnum" = ...
  NEVER: "SoSFEnum" = ...
  ALWAYS: "SoSFEnum" = ...
  LESS: "SoSFEnum" = ...
  LEQUAL: "SoSFEnum" = ...
  EQUAL: "SoSFEnum" = ...
  GEQUAL: "SoSFEnum" = ...
  GREATER: "SoSFEnum" = ...
  NOTEQUAL: "SoSFEnum" = ...
  @staticmethod
  def getClassTypeId():
    ...

  def getTypeId(self):
    ...

  @staticmethod
  def initClass():
    ...

  def __init__(self):
    ...

  def GLRender(self, action):
    ...

  function: SoSFEnum = ...
  value: SoSFFloat = ...
class SoNodeEngine(SoNode):
  @staticmethod
  def initClass():
    ...

  @staticmethod
  def getClassTypeId():
    ...

  def evaluateWrapper(self):
    ...

  def getOutputs(self, l):
    ...

  def getOutput(self, outputname):
    ...

  def getOutputName(self, output, outputname):
    ...

  def getOutputData(self):
    ...

  def isNotifying(self):
    ...

  def notify(self, nl):
    ...

  def writeInstance(self, out):
    ...

