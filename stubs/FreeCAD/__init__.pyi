from WorkingPlane import Plane
from typing import Iterator, Tuple, Any, Union, overload, Optional, List
from . import Units
from FreeCADGui import View3DInventor, MDIView, ViewObject as VO
from .ComplexGeoData import ComplexGeoData

class DocumentObject:
    def __init__(self): ...
    def isDerivedFrom(self, class_name: str) -> bool: ...

    @property
    def Objects(self): ...
    @Objects.setter
    def Objects(self, objects): ...

    @property
    def Visibility(self) -> bool:
        pass

    @property
    def ViewObject(self) -> VO:
        """
        If the GUI is loaded the associated view provider is returned
        or None if the GUI is not up
        """
        pass

    @property
    def Label(self) -> str: ...
    @Label.setter
    def Label(self, value: str) -> None: ...

class Document:
    @property
    def Objects(self) -> List[DocumentObject]: ...

    @property
    def ActiveView(self) -> Union[View3DInventor, MDIView]: ...

    def __init__(self): ...
    def getObject(self, name: str) -> DocumentObject: ...
    def addObject(self, cpp_type: str, name: str) -> DocumentObject: ...
    def resetEdit(self) -> None: ...
    def recompute(self) -> None: ...
    def openTransaction(self, name: str) -> Any: ...
    def commitTransaction(self) -> None: ...

GuiUp: int
DraftWorkingPlane: Plane
activeDraftCommand: None
Console: Any
ActiveDocument: Optional[Document]

def getDocument(name: str) -> Any: ...

# Get parameters by path
def ParamGet(path: str) -> ParameterGrp: ...


# Save parameter set to file. The default set is 'User parameter'
def saveParameter(config: str = ...) -> None: ...


# Print the version to the output
def Version() -> None: ...

class GeoFeature(DocumentObject):
    @property
    def Placement(self): ...
    @Placement.setter
    def Placement(self, p: Placement): ...

# Base::VectorPy
class Vector:
    @property
    def Length(self) -> float: ...

    @overload
    def __init__(self, other: Vector):
        self.x: float = other.x
        self.y: float = other.y
        self.z: float = other.z

    @overload
    def __init__(self):
        self.x = 1.0
        self.y = 1.0
        self.z = 1.0

    @overload
    def __init__(self, x: float, y: float, z: float):
        self.x = x
        self.y = y
        self.z = z

    @overload
    def __init__(self, vector: Tuple[float, float, float]): ...

    def add(self, p: Vector) -> Vector: ...
    def sub(self, p: Vector) -> Vector: ...

    def multiply(self, factor: float) -> Vector: ...

    def cross(self, v: Vector) -> Vector: ...

    def normalize(self) -> Vector: ...


    def __iter__(self) -> Iterator[float]: ...

def getResourceDir() -> str: ...
def getUserAppDataDir() -> str: ...

# App/Application.cpp
# TODO import from __FreeCADBase__

# App::MaterialPy
class Material: ...
# Base::MatrixPy
class Matrix: ...
# Base::BoundBoxPy
class BoundBox:
    def __init__(self) -> None: ...
    def add(self, box: BoundBox): ...
    @property
    def XMin(self) -> float: ...
    @property
    def YMin(self) -> float: ...
    @property
    def ZMin(self) -> float: ...
    @property
    def Center(self): ...
    @property
    def XLength(self): ...
    @property
    def YLength(self): ...

# Base::PlacementPy
class Placement:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, p: Any) -> None: ...

    def multVec(self, v: Vector) -> Vector: ...
    def move(self, v: Vector) -> None: ...

    @property
    def Base(self) -> Vector: ...

    @Base.setter
    def Base(self, value: Vector) -> None: ... 

    @property
    def Rotation(self) -> Rotation: ...

    @Rotation.setter
    def Rotation(self, value: Rotation) -> None: ... 

# Base::RotationPy
class Rotation:
    @overload
    def __init__(self) -> None: ...

    @overload
    def __init__(self, x: float, y: float, z: float) -> None: ...

    @overload
    def __init__(self, axis1: Vector, axis2: Vector, axis3: Vector, order: str) -> None: ...

    @overload
    def __init__(self, vector: Vector, angle: float) -> None: ...

    def multiply(self, vector: Union[Vector, Rotation]): ...
    def multVec(self, v: Union[Vector, Rotation]): ...

    @property
    def Q(self): ...

# Base::AxisPy
class Axis: ...


class ParameterGrp:
    def GetString(self, name: str, default: str = ...) -> str: ...
    def GetBool(self, name: str, default: bool = ...) -> bool: ...
    def GetInt(self, name: str, default: int = ...) -> int: ...
    def GetFloat(self, name: str, default: float = ...) -> float: ...

    def SetString(self, name: str, value: str) -> None: ...
    def SetBool(self, name: str, value: bool) -> None: ...
    def SetInt(self, name: str, value: int) -> None: ...
    def SetFloat(self, name: str, value: float) -> None: ...
